/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_tv_WRAP_H_
#define SWIG_tv_WRAP_H_

#include <map>
#include <string>


class SwigDirector_TWindow : public TWindow, public Swig::Director {

public:
    SwigDirector_TWindow(PyObject *self, TRect const &bounds, char const *aTitle, short aNumber);
    virtual ~SwigDirector_TWindow();
    virtual void shutDown();
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void changeBounds(TRect const &bounds);
    virtual ushort getHelpCtx();
    virtual Boolean valid(ushort command);
    virtual void draw();
    virtual uint32 dataSize();
    virtual void getData(void *rec);
    virtual void setData(void *rec);
    virtual void resetCursor();
    virtual void getEvent(TEvent &event);
    virtual void handleEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void endModal(ushort command);
    virtual ushort execute();
    virtual TPalette &getPalette() const;
    virtual void setState(ushort aState, Boolean enable);
    virtual Boolean canShowCursor();
    virtual void eventError(TEvent &event);
    virtual TFrame *defaultInitFrame(TRect &rect);
    virtual void close();
    virtual char const *getTitle(short maxSize);
    virtual void zoom();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class TWindow doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[25];
#endif

};


class SwigDirector_TProgram : public TProgram, public Swig::Director {

public:
    SwigDirector_TProgram(PyObject *self);
    virtual ~SwigDirector_TProgram();
    virtual void shutDown();
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void changeBounds(TRect const &bounds);
    virtual ushort getHelpCtx();
    virtual Boolean valid(ushort command);
    virtual void draw();
    virtual uint32 dataSize();
    virtual void getData(void *rec);
    virtual void setData(void *rec);
    virtual void resetCursor();
    virtual void getEvent(TEvent &event);
    virtual void handleEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void endModal(ushort command);
    virtual ushort execute();
    virtual TPalette &getPalette() const;
    virtual void setState(ushort aState, Boolean enable);
    virtual Boolean canShowCursor();
    virtual void eventError(TEvent &event);
    virtual void idle();
    virtual void initScreen();
    virtual void outOfMemory();
    virtual void run();
    virtual void suspend();
    virtual void resume();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class TProgram doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[27];
#endif

};


class SwigDirector_TApplication : public TApplication, public Swig::Director {

public:
    SwigDirector_TApplication(PyObject *self);
    virtual ~SwigDirector_TApplication();
    virtual void shutDown();
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void changeBounds(TRect const &bounds);
    virtual ushort getHelpCtx();
    virtual Boolean valid(ushort command);
    virtual void draw();
    virtual uint32 dataSize();
    virtual void getData(void *rec);
    virtual void setData(void *rec);
    virtual void resetCursor();
    virtual void getEvent(TEvent &event);
    virtual void handleEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void endModal(ushort command);
    virtual ushort execute();
    virtual TPalette &getPalette() const;
    virtual void setState(ushort aState, Boolean enable);
    virtual Boolean canShowCursor();
    virtual void eventError(TEvent &event);
    virtual void idle();
    virtual void initScreen();
    virtual void outOfMemory();
    virtual void run();
    virtual void suspend();
    virtual void resume();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class TApplication doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[27];
#endif

};


class SwigDirector_TMethodHolder : public TMethodHolder, public Swig::Director {

public:
    SwigDirector_TMethodHolder(PyObject *self);
    virtual TStatusLine *initStatusLine(TRect arg0);
    virtual TMenuBar *initMenuBar(TRect arg0);
    virtual TDeskTop *initDeskTop(TRect arg0);
    virtual ~SwigDirector_TMethodHolder();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class TMethodHolder doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_TAppWrapper : public TAppWrapper, public Swig::Director {

public:
    SwigDirector_TAppWrapper(PyObject *self, TMethodHolder *arg0);
    virtual ~SwigDirector_TAppWrapper();
    virtual void shutDown();
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void changeBounds(TRect const &bounds);
    virtual ushort getHelpCtx();
    virtual Boolean valid(ushort command);
    virtual void draw();
    virtual uint32 dataSize();
    virtual void getData(void *rec);
    virtual void setData(void *rec);
    virtual void resetCursor();
    virtual void getEvent(TEvent &event);
    virtual void handleEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void endModal(ushort command);
    virtual ushort execute();
    virtual TPalette &getPalette() const;
    virtual void setState(ushort aState, Boolean enable);
    virtual Boolean canShowCursor();
    virtual void eventError(TEvent &event);
    virtual void idle();
    virtual void initScreen();
    virtual void outOfMemory();
    virtual void run();
    virtual void suspend();
    virtual void resume();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class TAppWrapper doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[27];
#endif

};


#endif
