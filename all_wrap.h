/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_tv_WRAP_H_
#define SWIG_tv_WRAP_H_

class Swig::Director;


class SwigDirector_TWindow : public TWindow, public Swig::Director {

public:
    SwigDirector_TWindow(PyObject *self, TRect const &bounds, char const *aTitle, short aNumber, bool disown = false);
    virtual void handleEvent(TEvent &event);
    virtual void getEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void eventError(TEvent &event);
    virtual void resetCursor();
    virtual Boolean canShowCursor();
    virtual uint32 dataSize();
    virtual ushort execute();
    virtual char const *getTitle(short maxSize);
    virtual void zoom();
    virtual ushort getHelpCtx();
    virtual void setState(ushort aState, Boolean enable);
    virtual TFrame *defaultInitFrame(TRect &rect);
    virtual void close();
    virtual void shutDown();
    virtual void draw();
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void changeBounds(TRect const &bounds);
    virtual void setData(void *rec);
    virtual void getData(void *rec);
    virtual Boolean valid(ushort command);
    virtual void endModal(ushort command);
    virtual TPalette &getPalette() const;
};


class SwigDirector_TProgram : public TProgram, public Swig::Director {

public:
    SwigDirector_TProgram(PyObject *self, bool disown = false);
    virtual void handleEvent(TEvent &event);
    virtual void getEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void eventError(TEvent &event);
    virtual void resetCursor();
    virtual Boolean canShowCursor();
    virtual void suspend();
    virtual uint32 dataSize();
    virtual ushort execute();
    virtual void idle();
    virtual ushort getHelpCtx();
    virtual void setState(ushort aState, Boolean enable);
    virtual void resume();
    virtual void shutDown();
    virtual void initScreen();
    virtual void run();
    virtual void draw();
    virtual void outOfMemory();
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void changeBounds(TRect const &bounds);
    virtual void setData(void *rec);
    virtual void getData(void *rec);
    virtual Boolean valid(ushort command);
    virtual void endModal(ushort command);
    virtual TPalette &getPalette() const;
};


class SwigDirector_TApplication : public TApplication, public Swig::Director {

public:
    SwigDirector_TApplication(PyObject *self, bool disown = false);
    virtual void handleEvent(TEvent &event);
    virtual void getEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void eventError(TEvent &event);
    virtual void resetCursor();
    virtual Boolean canShowCursor();
    virtual void suspend();
    virtual uint32 dataSize();
    virtual ushort execute();
    virtual void idle();
    virtual ushort getHelpCtx();
    virtual void setState(ushort aState, Boolean enable);
    virtual void resume();
    virtual void shutDown();
    virtual void initScreen();
    virtual void run();
    virtual void draw();
    virtual void outOfMemory();
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void changeBounds(TRect const &bounds);
    virtual void setData(void *rec);
    virtual void getData(void *rec);
    virtual Boolean valid(ushort command);
    virtual void endModal(ushort command);
    virtual TPalette &getPalette() const;
};


class SwigDirector_TMethodHolder : public TMethodHolder, public Swig::Director {

public:
    SwigDirector_TMethodHolder(PyObject* self, bool disown = false);
    virtual TStatusLine *initStatusLine(TRect arg0);
    virtual TMenuBar *initMenuBar(TRect arg0);
    virtual TDeskTop *initDeskTop(TRect arg0);
};


class SwigDirector_TAppWrapper : public TAppWrapper, public Swig::Director {

public:
    SwigDirector_TAppWrapper(PyObject *self, TMethodHolder *arg0, bool disown = false);
    virtual void handleEvent(TEvent &event);
    virtual void getEvent(TEvent &event);
    virtual void putEvent(TEvent &event);
    virtual void eventError(TEvent &event);
    virtual void resetCursor();
    virtual Boolean canShowCursor();
    virtual void suspend();
    virtual uint32 dataSize();
    virtual ushort execute();
    virtual void idle();
    virtual ushort getHelpCtx();
    virtual void setState(ushort aState, Boolean enable);
    virtual void resume();
    virtual void shutDown();
    virtual void initScreen();
    virtual void run();
    virtual void draw();
    virtual void outOfMemory();
    virtual void calcBounds(TRect &bounds, TPoint delta);
    virtual void dragView(TEvent &event, uchar mode, TRect &limits, TPoint minSize, TPoint maxSize);
    virtual void sizeLimits(TPoint &min, TPoint &max);
    virtual void changeBounds(TRect const &bounds);
    virtual void setData(void *rec);
    virtual void getData(void *rec);
    virtual Boolean valid(ushort command);
    virtual void endModal(ushort command);
    virtual TPalette &getPalette() const;
};


#endif
