# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tv')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tv')
    _tv = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tv', [dirname(__file__)])
        except ImportError:
            import _tv
            return _tv
        try:
            _mod = imp.load_module('_tv', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tv = swig_import_helper()
    del swig_import_helper
else:
    import _tv
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


CLY_SizedTypesDefined = _tv.CLY_SizedTypesDefined
streamableInit = _tv.streamableInit
class TObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TObject, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _tv.delete_TObject
    __del__ = lambda self: None
    if _newclass:
        CLY_destroy = staticmethod(_tv.TObject_CLY_destroy)
    else:
        CLY_destroy = _tv.TObject_CLY_destroy

    def shutDown(self):
        return _tv.TObject_shutDown(self)

    def __init__(self):
        this = _tv.new_TObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
TObject_swigregister = _tv.TObject_swigregister
TObject_swigregister(TObject)
cvar = _tv.cvar
EOS = cvar.EOS
ccNotFound = cvar.ccNotFound
evMouseDown = cvar.evMouseDown
evMouseUp = cvar.evMouseUp
evMouseMove = cvar.evMouseMove
evMouseAuto = cvar.evMouseAuto
evKeyDown = cvar.evKeyDown
evCommand = cvar.evCommand
evBroadcast = cvar.evBroadcast
evNothing = cvar.evNothing
evMouse = cvar.evMouse
evKeyboard = cvar.evKeyboard
evMessage = cvar.evMessage
mbLeftButton = cvar.mbLeftButton
mbMiddleButton = cvar.mbMiddleButton
mbRightButton = cvar.mbRightButton
mbButton4 = cvar.mbButton4
mbButton5 = cvar.mbButton5

def TObject_CLY_destroy(arg2):
    return _tv.TObject_CLY_destroy(arg2)
TObject_CLY_destroy = _tv.TObject_CLY_destroy

class MouseEventType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseEventType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MouseEventType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buttons"] = _tv.MouseEventType_buttons_set
    __swig_getmethods__["buttons"] = _tv.MouseEventType_buttons_get
    if _newclass:
        buttons = _swig_property(_tv.MouseEventType_buttons_get, _tv.MouseEventType_buttons_set)
    __swig_setmethods__["doubleClick"] = _tv.MouseEventType_doubleClick_set
    __swig_getmethods__["doubleClick"] = _tv.MouseEventType_doubleClick_get
    if _newclass:
        doubleClick = _swig_property(_tv.MouseEventType_doubleClick_get, _tv.MouseEventType_doubleClick_set)
    __swig_setmethods__["where"] = _tv.MouseEventType_where_set
    __swig_getmethods__["where"] = _tv.MouseEventType_where_get
    if _newclass:
        where = _swig_property(_tv.MouseEventType_where_get, _tv.MouseEventType_where_set)

    def __init__(self):
        this = _tv.new_MouseEventType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_MouseEventType
    __del__ = lambda self: None
MouseEventType_swigregister = _tv.MouseEventType_swigregister
MouseEventType_swigregister(MouseEventType)

class THWMouse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THWMouse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THWMouse, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        forceEvent = staticmethod(_tv.THWMouse_forceEvent)
    else:
        forceEvent = _tv.THWMouse_forceEvent
THWMouse_swigregister = _tv.THWMouse_swigregister
THWMouse_swigregister(THWMouse)

def THWMouse_forceEvent(x, y, buttons):
    return _tv.THWMouse_forceEvent(x, y, buttons)
THWMouse_forceEvent = _tv.THWMouse_forceEvent

class TMouse(THWMouse):
    __swig_setmethods__ = {}
    for _s in [THWMouse]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMouse, name, value)
    __swig_getmethods__ = {}
    for _s in [THWMouse]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMouse, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tv.new_TMouse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TMouse
    __del__ = lambda self: None
    if _newclass:
        show = staticmethod(_tv.TMouse_show)
    else:
        show = _tv.TMouse_show
    if _newclass:
        hide = staticmethod(_tv.TMouse_hide)
    else:
        hide = _tv.TMouse_hide
    if _newclass:
        suspend = staticmethod(_tv.TMouse_suspend)
    else:
        suspend = _tv.TMouse_suspend
    if _newclass:
        resume = staticmethod(_tv.TMouse_resume)
    else:
        resume = _tv.TMouse_resume
    if _newclass:
        setRange = staticmethod(_tv.TMouse_setRange)
    else:
        setRange = _tv.TMouse_setRange
    if _newclass:
        getEvent = staticmethod(_tv.TMouse_getEvent)
    else:
        getEvent = _tv.TMouse_getEvent
    if _newclass:
        present = staticmethod(_tv.TMouse_present)
    else:
        present = _tv.TMouse_present
    if _newclass:
        resetDrawCounter = staticmethod(_tv.TMouse_resetDrawCounter)
    else:
        resetDrawCounter = _tv.TMouse_resetDrawCounter
    if _newclass:
        getDrawCounter = staticmethod(_tv.TMouse_getDrawCounter)
    else:
        getDrawCounter = _tv.TMouse_getDrawCounter
TMouse_swigregister = _tv.TMouse_swigregister
TMouse_swigregister(TMouse)

def TMouse_show():
    return _tv.TMouse_show()
TMouse_show = _tv.TMouse_show

def TMouse_hide():
    return _tv.TMouse_hide()
TMouse_hide = _tv.TMouse_hide

def TMouse_suspend():
    return _tv.TMouse_suspend()
TMouse_suspend = _tv.TMouse_suspend

def TMouse_resume():
    return _tv.TMouse_resume()
TMouse_resume = _tv.TMouse_resume

def TMouse_setRange(arg2, arg3):
    return _tv.TMouse_setRange(arg2, arg3)
TMouse_setRange = _tv.TMouse_setRange

def TMouse_getEvent(arg2):
    return _tv.TMouse_getEvent(arg2)
TMouse_getEvent = _tv.TMouse_getEvent

def TMouse_present():
    return _tv.TMouse_present()
TMouse_present = _tv.TMouse_present

def TMouse_resetDrawCounter():
    return _tv.TMouse_resetDrawCounter()
TMouse_resetDrawCounter = _tv.TMouse_resetDrawCounter

def TMouse_getDrawCounter():
    return _tv.TMouse_getDrawCounter()
TMouse_getDrawCounter = _tv.TMouse_getDrawCounter

class CharScanType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharScanType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharScanType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["charCode"] = _tv.CharScanType_charCode_set
    __swig_getmethods__["charCode"] = _tv.CharScanType_charCode_get
    if _newclass:
        charCode = _swig_property(_tv.CharScanType_charCode_get, _tv.CharScanType_charCode_set)
    __swig_setmethods__["scanCode"] = _tv.CharScanType_scanCode_set
    __swig_getmethods__["scanCode"] = _tv.CharScanType_scanCode_get
    if _newclass:
        scanCode = _swig_property(_tv.CharScanType_scanCode_get, _tv.CharScanType_scanCode_set)

    def __init__(self):
        this = _tv.new_CharScanType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_CharScanType
    __del__ = lambda self: None
CharScanType_swigregister = _tv.CharScanType_swigregister
CharScanType_swigregister(CharScanType)

class KeyDownEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyDownEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyDownEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["charScan"] = _tv.KeyDownEvent_charScan_set
    __swig_getmethods__["charScan"] = _tv.KeyDownEvent_charScan_get
    if _newclass:
        charScan = _swig_property(_tv.KeyDownEvent_charScan_get, _tv.KeyDownEvent_charScan_set)
    __swig_setmethods__["keyCode"] = _tv.KeyDownEvent_keyCode_set
    __swig_getmethods__["keyCode"] = _tv.KeyDownEvent_keyCode_get
    if _newclass:
        keyCode = _swig_property(_tv.KeyDownEvent_keyCode_get, _tv.KeyDownEvent_keyCode_set)
    __swig_setmethods__["shiftState"] = _tv.KeyDownEvent_shiftState_set
    __swig_getmethods__["shiftState"] = _tv.KeyDownEvent_shiftState_get
    if _newclass:
        shiftState = _swig_property(_tv.KeyDownEvent_shiftState_get, _tv.KeyDownEvent_shiftState_set)
    __swig_setmethods__["raw_scanCode"] = _tv.KeyDownEvent_raw_scanCode_set
    __swig_getmethods__["raw_scanCode"] = _tv.KeyDownEvent_raw_scanCode_get
    if _newclass:
        raw_scanCode = _swig_property(_tv.KeyDownEvent_raw_scanCode_get, _tv.KeyDownEvent_raw_scanCode_set)
    __swig_setmethods__["charCode"] = _tv.KeyDownEvent_charCode_set
    __swig_getmethods__["charCode"] = _tv.KeyDownEvent_charCode_get
    if _newclass:
        charCode = _swig_property(_tv.KeyDownEvent_charCode_get, _tv.KeyDownEvent_charCode_set)

    def __init__(self):
        this = _tv.new_KeyDownEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_KeyDownEvent
    __del__ = lambda self: None
KeyDownEvent_swigregister = _tv.KeyDownEvent_swigregister
KeyDownEvent_swigregister(KeyDownEvent)

class MessageEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["command"] = _tv.MessageEvent_command_set
    __swig_getmethods__["command"] = _tv.MessageEvent_command_get
    if _newclass:
        command = _swig_property(_tv.MessageEvent_command_get, _tv.MessageEvent_command_set)
    __swig_setmethods__["infoPtr"] = _tv.MessageEvent_infoPtr_set
    __swig_getmethods__["infoPtr"] = _tv.MessageEvent_infoPtr_get
    if _newclass:
        infoPtr = _swig_property(_tv.MessageEvent_infoPtr_get, _tv.MessageEvent_infoPtr_set)
    __swig_setmethods__["infoLong"] = _tv.MessageEvent_infoLong_set
    __swig_getmethods__["infoLong"] = _tv.MessageEvent_infoLong_get
    if _newclass:
        infoLong = _swig_property(_tv.MessageEvent_infoLong_get, _tv.MessageEvent_infoLong_set)
    __swig_setmethods__["infoWord"] = _tv.MessageEvent_infoWord_set
    __swig_getmethods__["infoWord"] = _tv.MessageEvent_infoWord_get
    if _newclass:
        infoWord = _swig_property(_tv.MessageEvent_infoWord_get, _tv.MessageEvent_infoWord_set)
    __swig_setmethods__["infoInt"] = _tv.MessageEvent_infoInt_set
    __swig_getmethods__["infoInt"] = _tv.MessageEvent_infoInt_get
    if _newclass:
        infoInt = _swig_property(_tv.MessageEvent_infoInt_get, _tv.MessageEvent_infoInt_set)
    __swig_setmethods__["infoByte"] = _tv.MessageEvent_infoByte_set
    __swig_getmethods__["infoByte"] = _tv.MessageEvent_infoByte_get
    if _newclass:
        infoByte = _swig_property(_tv.MessageEvent_infoByte_get, _tv.MessageEvent_infoByte_set)
    __swig_setmethods__["infoChar"] = _tv.MessageEvent_infoChar_set
    __swig_getmethods__["infoChar"] = _tv.MessageEvent_infoChar_get
    if _newclass:
        infoChar = _swig_property(_tv.MessageEvent_infoChar_get, _tv.MessageEvent_infoChar_set)

    def __init__(self):
        this = _tv.new_MessageEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_MessageEvent
    __del__ = lambda self: None
MessageEvent_swigregister = _tv.MessageEvent_swigregister
MessageEvent_swigregister(MessageEvent)

class TEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["what"] = _tv.TEvent_what_set
    __swig_getmethods__["what"] = _tv.TEvent_what_get
    if _newclass:
        what = _swig_property(_tv.TEvent_what_get, _tv.TEvent_what_set)
    __swig_setmethods__["mouse"] = _tv.TEvent_mouse_set
    __swig_getmethods__["mouse"] = _tv.TEvent_mouse_get
    if _newclass:
        mouse = _swig_property(_tv.TEvent_mouse_get, _tv.TEvent_mouse_set)
    __swig_setmethods__["keyDown"] = _tv.TEvent_keyDown_set
    __swig_getmethods__["keyDown"] = _tv.TEvent_keyDown_get
    if _newclass:
        keyDown = _swig_property(_tv.TEvent_keyDown_get, _tv.TEvent_keyDown_set)
    __swig_setmethods__["message"] = _tv.TEvent_message_set
    __swig_getmethods__["message"] = _tv.TEvent_message_get
    if _newclass:
        message = _swig_property(_tv.TEvent_message_get, _tv.TEvent_message_set)

    def __init__(self):
        this = _tv.new_TEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TEvent
    __del__ = lambda self: None
TEvent_swigregister = _tv.TEvent_swigregister
TEvent_swigregister(TEvent)

class TStreamable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TStreamable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TStreamable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tv.delete_TStreamable
    __del__ = lambda self: None
TStreamable_swigregister = _tv.TStreamable_swigregister
TStreamable_swigregister(TStreamable)

class TNSCollection(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TNSCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TNSCollection, name)
    __repr__ = _swig_repr

    def __init__(self, aLimit, aDelta):
        this = _tv.new_TNSCollection(aLimit, aDelta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TNSCollection
    __del__ = lambda self: None

    def shutDown(self):
        return _tv.TNSCollection_shutDown(self)

    def at(self, index):
        return _tv.TNSCollection_at(self, index)

    def indexOf(self, item):
        return _tv.TNSCollection_indexOf(self, item)

    def atFree(self, index):
        return _tv.TNSCollection_atFree(self, index)

    def atRemove(self, index):
        return _tv.TNSCollection_atRemove(self, index)

    def remove(self, item):
        return _tv.TNSCollection_remove(self, item)

    def removeAll(self):
        return _tv.TNSCollection_removeAll(self)

    def free(self, item):
        return _tv.TNSCollection_free(self, item)

    def freeAll(self):
        return _tv.TNSCollection_freeAll(self)

    def atInsert(self, index, item):
        return _tv.TNSCollection_atInsert(self, index, item)

    def atPut(self, index, item):
        return _tv.TNSCollection_atPut(self, index, item)

    def atReplace(self, index, item):
        return _tv.TNSCollection_atReplace(self, index, item)

    def insert(self, item):
        return _tv.TNSCollection_insert(self, item)

    def insert(self, p):
        p.thisown = 0
        return _tv.TNSCollection_insert(self, p)


    def error(self, code, info):
        return _tv.TNSCollection_error(self, code, info)

    def firstThat(self, Test, arg):
        return _tv.TNSCollection_firstThat(self, Test, arg)

    def lastThat(self, Test, arg):
        return _tv.TNSCollection_lastThat(self, Test, arg)

    def forEach(self, action, arg):
        return _tv.TNSCollection_forEach(self, action, arg)

    def pack(self):
        return _tv.TNSCollection_pack(self)

    def setLimit(self, aLimit):
        return _tv.TNSCollection_setLimit(self, aLimit)

    def getCount(self):
        return _tv.TNSCollection_getCount(self)

    def setOwnerShip(self, option):
        return _tv.TNSCollection_setOwnerShip(self, option)
TNSCollection_swigregister = _tv.TNSCollection_swigregister
TNSCollection_swigregister(TNSCollection)

class TNSSortedCollection(TNSCollection):
    __swig_setmethods__ = {}
    for _s in [TNSCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TNSSortedCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [TNSCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TNSSortedCollection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def search(self, key, index):
        return _tv.TNSSortedCollection_search(self, key, index)

    def indexOf(self, item):
        return _tv.TNSSortedCollection_indexOf(self, item)

    def insert(self, item):
        return _tv.TNSSortedCollection_insert(self, item)
    __swig_setmethods__["duplicates"] = _tv.TNSSortedCollection_duplicates_set
    __swig_getmethods__["duplicates"] = _tv.TNSSortedCollection_duplicates_get
    if _newclass:
        duplicates = _swig_property(_tv.TNSSortedCollection_duplicates_get, _tv.TNSSortedCollection_duplicates_set)

    def keyOf(self, item):
        return _tv.TNSSortedCollection_keyOf(self, item)
    __swig_destroy__ = _tv.delete_TNSSortedCollection
    __del__ = lambda self: None
TNSSortedCollection_swigregister = _tv.TNSSortedCollection_swigregister
TNSSortedCollection_swigregister(TNSSortedCollection)

class TCollection(TNSCollection):
    __swig_setmethods__ = {}
    for _s in [TNSCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [TNSCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCollection, name)
    __repr__ = _swig_repr

    def __init__(self, aLimit, aDelta):
        this = _tv.new_TCollection(aLimit, aDelta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TCollection
    __del__ = lambda self: None
TCollection_swigregister = _tv.TCollection_swigregister
TCollection_swigregister(TCollection)

class TSortedCollection(TNSSortedCollection, TCollection):
    __swig_setmethods__ = {}
    for _s in [TNSSortedCollection, TCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSortedCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [TNSSortedCollection, TCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TSortedCollection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tv.delete_TSortedCollection
    __del__ = lambda self: None
TSortedCollection_swigregister = _tv.TSortedCollection_swigregister
TSortedCollection_swigregister(TSortedCollection)

class TStringCollection(TSortedCollection):
    __swig_setmethods__ = {}
    for _s in [TSortedCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TStringCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [TSortedCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TStringCollection, name)
    __repr__ = _swig_repr

    def __init__(self, aLimit, aDelta):
        this = _tv.new_TStringCollection(aLimit, aDelta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TStringCollection
    __del__ = lambda self: None
TStringCollection_swigregister = _tv.TStringCollection_swigregister
TStringCollection_swigregister(TStringCollection)

class TPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPoint, name)
    __repr__ = _swig_repr

    def __iadd__(self, adder):
        return _tv.TPoint___iadd__(self, adder)

    def __isub__(self, subber):
        return _tv.TPoint___isub__(self, subber)
    __swig_setmethods__["x"] = _tv.TPoint_x_set
    __swig_getmethods__["x"] = _tv.TPoint_x_get
    if _newclass:
        x = _swig_property(_tv.TPoint_x_get, _tv.TPoint_x_set)
    __swig_setmethods__["y"] = _tv.TPoint_y_set
    __swig_getmethods__["y"] = _tv.TPoint_y_get
    if _newclass:
        y = _swig_property(_tv.TPoint_y_get, _tv.TPoint_y_set)

    def __init__(self):
        this = _tv.new_TPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TPoint
    __del__ = lambda self: None
TPoint_swigregister = _tv.TPoint_swigregister
TPoint_swigregister(TPoint)

class TRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TRect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def move(self, aDX, aDY):
        return _tv.TRect_move(self, aDX, aDY)

    def grow(self, aDX, aDY):
        return _tv.TRect_grow(self, aDX, aDY)

    def intersect(self, r):
        return _tv.TRect_intersect(self, r)

    def Union(self, r):
        return _tv.TRect_Union(self, r)

    def contains(self, p):
        return _tv.TRect_contains(self, p)

    def __eq__(self, r):
        return _tv.TRect___eq__(self, r)

    def __ne__(self, r):
        return _tv.TRect___ne__(self, r)

    def isEmpty(self):
        return _tv.TRect_isEmpty(self)
    __swig_setmethods__["a"] = _tv.TRect_a_set
    __swig_getmethods__["a"] = _tv.TRect_a_get
    if _newclass:
        a = _swig_property(_tv.TRect_a_get, _tv.TRect_a_set)
    __swig_setmethods__["b"] = _tv.TRect_b_set
    __swig_getmethods__["b"] = _tv.TRect_b_get
    if _newclass:
        b = _swig_property(_tv.TRect_b_get, _tv.TRect_b_set)
    __swig_destroy__ = _tv.delete_TRect
    __del__ = lambda self: None
TRect_swigregister = _tv.TRect_swigregister
TRect_swigregister(TRect)

class TPalette(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPalette, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPalette, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TPalette(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TPalette
    __del__ = lambda self: None
    __swig_setmethods__["data"] = _tv.TPalette_data_set
    __swig_getmethods__["data"] = _tv.TPalette_data_get
    if _newclass:
        data = _swig_property(_tv.TPalette_data_get, _tv.TPalette_data_set)
TPalette_swigregister = _tv.TPalette_swigregister
TPalette_swigregister(TPalette)

class TCommandSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCommandSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCommandSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tv.new_TCommandSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TCommandSet
    __del__ = lambda self: None

    def has(self, cmd):
        return _tv.TCommandSet_has(self, cmd)

    def disableCmdInt(self, cmd):
        return _tv.TCommandSet_disableCmdInt(self, cmd)

    def disableCmdRange(self, cmdStart, cmdEnd):
        return _tv.TCommandSet_disableCmdRange(self, cmdStart, cmdEnd)

    def enableCmdInt(self, cmd):
        return _tv.TCommandSet_enableCmdInt(self, cmd)

    def enableCmdRange(self, cmdStart, cmdEnd):
        return _tv.TCommandSet_enableCmdRange(self, cmdStart, cmdEnd)

    def enableAllCommands(self):
        return _tv.TCommandSet_enableAllCommands(self)

    def disableCmd(self, arg2):
        return _tv.TCommandSet_disableCmd(self, arg2)

    def enableCmd(self, arg2):
        return _tv.TCommandSet_enableCmd(self, arg2)

    def __iadd__(self, arg2):
        return _tv.TCommandSet___iadd__(self, arg2)

    def __isub__(self, arg2):
        return _tv.TCommandSet___isub__(self, arg2)

    def isEmpty(self):
        return _tv.TCommandSet_isEmpty(self)

    def set(self, arg2):
        return _tv.TCommandSet_set(self, arg2)

    def __iand__(self, arg2):
        return _tv.TCommandSet___iand__(self, arg2)

    def __ior__(self, arg2):
        return _tv.TCommandSet___ior__(self, arg2)
TCommandSet_swigregister = _tv.TCommandSet_swigregister
TCommandSet_swigregister(TCommandSet)

class write_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, write_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, write_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_self"] = _tv.write_args__self_set
    __swig_getmethods__["_self"] = _tv.write_args__self_get
    if _newclass:
        _self = _swig_property(_tv.write_args__self_get, _tv.write_args__self_set)
    __swig_setmethods__["target"] = _tv.write_args_target_set
    __swig_getmethods__["target"] = _tv.write_args_target_get
    if _newclass:
        target = _swig_property(_tv.write_args_target_get, _tv.write_args_target_set)
    __swig_setmethods__["buf"] = _tv.write_args_buf_set
    __swig_getmethods__["buf"] = _tv.write_args_buf_get
    if _newclass:
        buf = _swig_property(_tv.write_args_buf_get, _tv.write_args_buf_set)
    __swig_setmethods__["offset"] = _tv.write_args_offset_set
    __swig_getmethods__["offset"] = _tv.write_args_offset_get
    if _newclass:
        offset = _swig_property(_tv.write_args_offset_get, _tv.write_args_offset_set)

    def __init__(self):
        this = _tv.new_write_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_write_args
    __del__ = lambda self: None
write_args_swigregister = _tv.write_args_swigregister
write_args_swigregister(write_args)

class TView(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TView, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TView, name)
    __repr__ = _swig_repr
    phFocused = _tv.TView_phFocused
    phPreProcess = _tv.TView_phPreProcess
    phPostProcess = _tv.TView_phPostProcess
    normalSelect = _tv.TView_normalSelect
    enterSelect = _tv.TView_enterSelect
    leaveSelect = _tv.TView_leaveSelect

    def __init__(self, bounds):
        this = _tv.new_TView(bounds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TView
    __del__ = lambda self: None

    def sizeLimits(self, min, max):
        return _tv.TView_sizeLimits(self, min, max)

    def getBounds(self):
        return _tv.TView_getBounds(self)

    def getExtent(self):
        return _tv.TView_getExtent(self)

    def getClipRect(self):
        return _tv.TView_getClipRect(self)

    def mouseInView(self, mouse):
        return _tv.TView_mouseInView(self, mouse)

    def containsMouse(self, event):
        return _tv.TView_containsMouse(self, event)

    def locate(self, bounds):
        return _tv.TView_locate(self, bounds)

    def dragView(self, event, mode, limits, minSize, maxSize):
        return _tv.TView_dragView(self, event, mode, limits, minSize, maxSize)

    def calcBounds(self, bounds, delta):
        return _tv.TView_calcBounds(self, bounds, delta)

    def changeBounds(self, bounds):
        return _tv.TView_changeBounds(self, bounds)

    def growTo(self, x, y):
        return _tv.TView_growTo(self, x, y)

    def moveTo(self, x, y):
        return _tv.TView_moveTo(self, x, y)

    def setBounds(self, bounds):
        return _tv.TView_setBounds(self, bounds)

    def getHelpCtx(self):
        return _tv.TView_getHelpCtx(self)

    def valid(self, command):
        return _tv.TView_valid(self, command)

    def hide(self):
        return _tv.TView_hide(self)

    def show(self):
        return _tv.TView_show(self)

    def draw(self):
        return _tv.TView_draw(self)

    def drawView(self):
        return _tv.TView_drawView(self)

    def exposed(self):
        return _tv.TView_exposed(self)

    def hideCursor(self):
        return _tv.TView_hideCursor(self)

    def drawHide(self, lastView):
        return _tv.TView_drawHide(self, lastView)

    def drawShow(self, lastView):
        return _tv.TView_drawShow(self, lastView)

    def drawUnderRect(self, r, lastView):
        return _tv.TView_drawUnderRect(self, r, lastView)

    def drawUnderView(self, doShadow, lastView):
        return _tv.TView_drawUnderView(self, doShadow, lastView)

    def dataSize(self):
        return _tv.TView_dataSize(self)

    def getData(self, rec):
        return _tv.TView_getData(self, rec)

    def setData(self, rec):
        return _tv.TView_setData(self, rec)

    def blockCursor(self):
        return _tv.TView_blockCursor(self)

    def normalCursor(self):
        return _tv.TView_normalCursor(self)

    def resetCursor(self):
        return _tv.TView_resetCursor(self)

    def setCursor(self, x, y):
        return _tv.TView_setCursor(self, x, y)

    def showCursor(self):
        return _tv.TView_showCursor(self)

    def drawCursor(self):
        return _tv.TView_drawCursor(self)

    def clearEvent(self, event):
        return _tv.TView_clearEvent(self, event)

    def eventAvail(self):
        return _tv.TView_eventAvail(self)

    def getEvent(self, event):
        return _tv.TView_getEvent(self, event)

    def handleEvent(self, event):
        return _tv.TView_handleEvent(self, event)

    def putEvent(self, event):
        return _tv.TView_putEvent(self, event)
    if _newclass:
        commandEnabled = staticmethod(_tv.TView_commandEnabled)
    else:
        commandEnabled = _tv.TView_commandEnabled
    if _newclass:
        disableCommands = staticmethod(_tv.TView_disableCommands)
    else:
        disableCommands = _tv.TView_disableCommands
    if _newclass:
        enableCommands = staticmethod(_tv.TView_enableCommands)
    else:
        enableCommands = _tv.TView_enableCommands
    if _newclass:
        disableCommand = staticmethod(_tv.TView_disableCommand)
    else:
        disableCommand = _tv.TView_disableCommand
    if _newclass:
        enableCommand = staticmethod(_tv.TView_enableCommand)
    else:
        enableCommand = _tv.TView_enableCommand
    if _newclass:
        getCommands = staticmethod(_tv.TView_getCommands)
    else:
        getCommands = _tv.TView_getCommands
    if _newclass:
        setCommands = staticmethod(_tv.TView_setCommands)
    else:
        setCommands = _tv.TView_setCommands

    def endModal(self, command):
        return _tv.TView_endModal(self, command)

    def execute(self):
        return _tv.TView_execute(self)

    def getColor(self, color):
        return _tv.TView_getColor(self, color)

    def getPalette(self):
        return _tv.TView_getPalette(self)

    def mapColor(self, arg2):
        return _tv.TView_mapColor(self, arg2)

    def getState(self, aState):
        return _tv.TView_getState(self, aState)

    def select(self):
        return _tv.TView_select(self)

    def setState(self, aState, enable):
        return _tv.TView_setState(self, aState, enable)

    def keyEvent(self, event):
        return _tv.TView_keyEvent(self, event)

    def mouseEvent(self, event, mask):
        return _tv.TView_mouseEvent(self, event, mask)

    def makeGlobal(self, source):
        return _tv.TView_makeGlobal(self, source)

    def makeLocal(self, source):
        return _tv.TView_makeLocal(self, source)

    def nextView(self):
        return _tv.TView_nextView(self)

    def prevView(self):
        return _tv.TView_prevView(self)

    def prev(self):
        return _tv.TView_prev(self)
    __swig_setmethods__["next"] = _tv.TView_next_set
    __swig_getmethods__["next"] = _tv.TView_next_get
    if _newclass:
        next = _swig_property(_tv.TView_next_get, _tv.TView_next_set)

    def makeFirst(self):
        return _tv.TView_makeFirst(self)

    def putInFrontOf(self, Target):
        return _tv.TView_putInFrontOf(self, Target)

    def TopView(self):
        return _tv.TView_TopView(self)

    def writeBuf(self, *args):
        return _tv.TView_writeBuf(self, *args)

    def writeNativeBuf(self, x, y, w, h, Buffer):
        return _tv.TView_writeNativeBuf(self, x, y, w, h, Buffer)

    def writeLine(self, *args):
        return _tv.TView_writeLine(self, *args)

    def writeNativeLine(self, x, y, w, h, b):
        return _tv.TView_writeNativeLine(self, x, y, w, h, b)

    def writeChar(self, x, y, c, color, count):
        return _tv.TView_writeChar(self, x, y, c, color, count)

    def writeCharU16(self, x, y, c, color, count):
        return _tv.TView_writeCharU16(self, x, y, c, color, count)

    def writeStr(self, x, y, str, color):
        return _tv.TView_writeStr(self, x, y, str, color)

    def writeStrU16(self, x, y, str, color):
        return _tv.TView_writeStrU16(self, x, y, str, color)
    __swig_setmethods__["size"] = _tv.TView_size_set
    __swig_getmethods__["size"] = _tv.TView_size_get
    if _newclass:
        size = _swig_property(_tv.TView_size_get, _tv.TView_size_set)
    __swig_setmethods__["options"] = _tv.TView_options_set
    __swig_getmethods__["options"] = _tv.TView_options_get
    if _newclass:
        options = _swig_property(_tv.TView_options_get, _tv.TView_options_set)
    __swig_setmethods__["eventMask"] = _tv.TView_eventMask_set
    __swig_getmethods__["eventMask"] = _tv.TView_eventMask_get
    if _newclass:
        eventMask = _swig_property(_tv.TView_eventMask_get, _tv.TView_eventMask_set)
    __swig_setmethods__["state"] = _tv.TView_state_set
    __swig_getmethods__["state"] = _tv.TView_state_get
    if _newclass:
        state = _swig_property(_tv.TView_state_get, _tv.TView_state_set)
    __swig_setmethods__["origin"] = _tv.TView_origin_set
    __swig_getmethods__["origin"] = _tv.TView_origin_get
    if _newclass:
        origin = _swig_property(_tv.TView_origin_get, _tv.TView_origin_set)
    __swig_setmethods__["cursor"] = _tv.TView_cursor_set
    __swig_getmethods__["cursor"] = _tv.TView_cursor_get
    if _newclass:
        cursor = _swig_property(_tv.TView_cursor_get, _tv.TView_cursor_set)
    __swig_setmethods__["growMode"] = _tv.TView_growMode_set
    __swig_getmethods__["growMode"] = _tv.TView_growMode_get
    if _newclass:
        growMode = _swig_property(_tv.TView_growMode_get, _tv.TView_growMode_set)
    __swig_setmethods__["dragMode"] = _tv.TView_dragMode_set
    __swig_getmethods__["dragMode"] = _tv.TView_dragMode_get
    if _newclass:
        dragMode = _swig_property(_tv.TView_dragMode_get, _tv.TView_dragMode_set)
    __swig_setmethods__["helpCtx"] = _tv.TView_helpCtx_set
    __swig_getmethods__["helpCtx"] = _tv.TView_helpCtx_get
    if _newclass:
        helpCtx = _swig_property(_tv.TView_helpCtx_get, _tv.TView_helpCtx_set)
    __swig_setmethods__["commandSetChanged"] = _tv.TView_commandSetChanged_set
    __swig_getmethods__["commandSetChanged"] = _tv.TView_commandSetChanged_get
    if _newclass:
        commandSetChanged = _swig_property(_tv.TView_commandSetChanged_get, _tv.TView_commandSetChanged_set)
    __swig_setmethods__["curCommandSet"] = _tv.TView_curCommandSet_set
    __swig_getmethods__["curCommandSet"] = _tv.TView_curCommandSet_get
    if _newclass:
        curCommandSet = _swig_property(_tv.TView_curCommandSet_get, _tv.TView_curCommandSet_set)
    __swig_setmethods__["owner"] = _tv.TView_owner_set
    __swig_getmethods__["owner"] = _tv.TView_owner_get
    if _newclass:
        owner = _swig_property(_tv.TView_owner_get, _tv.TView_owner_set)
    __swig_setmethods__["showMarkers"] = _tv.TView_showMarkers_set
    __swig_getmethods__["showMarkers"] = _tv.TView_showMarkers_get
    if _newclass:
        showMarkers = _swig_property(_tv.TView_showMarkers_get, _tv.TView_showMarkers_set)
    __swig_setmethods__["errorAttr"] = _tv.TView_errorAttr_set
    __swig_getmethods__["errorAttr"] = _tv.TView_errorAttr_get
    if _newclass:
        errorAttr = _swig_property(_tv.TView_errorAttr_get, _tv.TView_errorAttr_set)

    def shutDown(self):
        return _tv.TView_shutDown(self)
TView_swigregister = _tv.TView_swigregister
TView_swigregister(TView)

def TView_commandEnabled(command):
    return _tv.TView_commandEnabled(command)
TView_commandEnabled = _tv.TView_commandEnabled

def TView_disableCommands(commands):
    return _tv.TView_disableCommands(commands)
TView_disableCommands = _tv.TView_disableCommands

def TView_enableCommands(commands):
    return _tv.TView_enableCommands(commands)
TView_enableCommands = _tv.TView_enableCommands

def TView_disableCommand(command):
    return _tv.TView_disableCommand(command)
TView_disableCommand = _tv.TView_disableCommand

def TView_enableCommand(command):
    return _tv.TView_enableCommand(command)
TView_enableCommand = _tv.TView_enableCommand

def TView_getCommands(commands):
    return _tv.TView_getCommands(commands)
TView_getCommands = _tv.TView_getCommands

def TView_setCommands(commands):
    return _tv.TView_setCommands(commands)
TView_setCommands = _tv.TView_setCommands

class TGroup(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TGroup, name)
    __repr__ = _swig_repr

    def __init__(self, bounds):
        this = _tv.new_TGroup(bounds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TGroup
    __del__ = lambda self: None

    def shutDown(self):
        return _tv.TGroup_shutDown(self)

    def execView(self, p):
        return _tv.TGroup_execView(self, p)

    def execute(self):
        return _tv.TGroup_execute(self)

    def insertView(self, p, Target):
        return _tv.TGroup_insertView(self, p, Target)

    def remove(self, p):
        return _tv.TGroup_remove(self, p)

    def removeView(self, p):
        return _tv.TGroup_removeView(self, p)

    def resetCurrent(self):
        return _tv.TGroup_resetCurrent(self)

    def setCurrent(self, p, mode):
        return _tv.TGroup_setCurrent(self, p, mode)

    def selectNext(self, forwards):
        return _tv.TGroup_selectNext(self, forwards)

    def firstThat(self, func, args):
        return _tv.TGroup_firstThat(self, func, args)

    def forEach(self, func, args):
        return _tv.TGroup_forEach(self, func, args)

    def insert(self, p):
        return _tv.TGroup_insert(self, p)

    def insert(self, p):
        p.thisown = 0
        return _tv.TGroup_insert(self, p)


    def insertBefore(self, p, Target):
        return _tv.TGroup_insertBefore(self, p, Target)

    def insertBefore(self, p):
        p.thisown = 0
        return _tv.TGroup_insertBefore(self, p)

    __swig_setmethods__["current"] = _tv.TGroup_current_set
    __swig_getmethods__["current"] = _tv.TGroup_current_get
    if _newclass:
        current = _swig_property(_tv.TGroup_current_get, _tv.TGroup_current_set)

    def at(self, index):
        return _tv.TGroup_at(self, index)

    def firstMatch(self, aState, aOptions):
        return _tv.TGroup_firstMatch(self, aState, aOptions)

    def indexOf(self, p):
        return _tv.TGroup_indexOf(self, p)

    def first(self):
        return _tv.TGroup_first(self)

    def setState(self, aState, enable):
        return _tv.TGroup_setState(self, aState, enable)

    def handleEvent(self, event):
        return _tv.TGroup_handleEvent(self, event)

    def drawSubViews(self, p, bottom):
        return _tv.TGroup_drawSubViews(self, p, bottom)

    def changeBounds(self, bounds):
        return _tv.TGroup_changeBounds(self, bounds)

    def dataSize(self):
        return _tv.TGroup_dataSize(self)

    def getData(self, rec):
        return _tv.TGroup_getData(self, rec)

    def setData(self, rec):
        return _tv.TGroup_setData(self, rec)

    def draw(self):
        return _tv.TGroup_draw(self)

    def redraw(self):
        return _tv.TGroup_redraw(self)

    def Redraw(self):
        return _tv.TGroup_Redraw(self)

    def lock(self):
        return _tv.TGroup_lock(self)

    def unlock(self):
        return _tv.TGroup_unlock(self)

    def resetCursor(self):
        return _tv.TGroup_resetCursor(self)

    def canShowCursor(self):
        return _tv.TGroup_canShowCursor(self)

    def endModal(self, command):
        return _tv.TGroup_endModal(self, command)

    def eventError(self, event):
        return _tv.TGroup_eventError(self, event)

    def getHelpCtx(self):
        return _tv.TGroup_getHelpCtx(self)

    def valid(self, command):
        return _tv.TGroup_valid(self, command)

    def freeBuffer(self):
        return _tv.TGroup_freeBuffer(self)

    def getBuffer(self):
        return _tv.TGroup_getBuffer(self)
    __swig_setmethods__["last"] = _tv.TGroup_last_set
    __swig_getmethods__["last"] = _tv.TGroup_last_get
    if _newclass:
        last = _swig_property(_tv.TGroup_last_get, _tv.TGroup_last_set)
    __swig_setmethods__["clip"] = _tv.TGroup_clip_set
    __swig_getmethods__["clip"] = _tv.TGroup_clip_get
    if _newclass:
        clip = _swig_property(_tv.TGroup_clip_get, _tv.TGroup_clip_set)
    __swig_setmethods__["phase"] = _tv.TGroup_phase_set
    __swig_getmethods__["phase"] = _tv.TGroup_phase_get
    if _newclass:
        phase = _swig_property(_tv.TGroup_phase_get, _tv.TGroup_phase_set)
    __swig_setmethods__["buffer"] = _tv.TGroup_buffer_set
    __swig_getmethods__["buffer"] = _tv.TGroup_buffer_get
    if _newclass:
        buffer = _swig_property(_tv.TGroup_buffer_get, _tv.TGroup_buffer_set)
    __swig_setmethods__["lockFlag"] = _tv.TGroup_lockFlag_set
    __swig_getmethods__["lockFlag"] = _tv.TGroup_lockFlag_get
    if _newclass:
        lockFlag = _swig_property(_tv.TGroup_lockFlag_get, _tv.TGroup_lockFlag_set)
    __swig_setmethods__["endState"] = _tv.TGroup_endState_set
    __swig_getmethods__["endState"] = _tv.TGroup_endState_get
    if _newclass:
        endState = _swig_property(_tv.TGroup_endState_get, _tv.TGroup_endState_set)
TGroup_swigregister = _tv.TGroup_swigregister
TGroup_swigregister(TGroup)

class TWindowInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TWindowInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TWindowInit, name)
    __repr__ = _swig_repr

    def __init__(self, cFrame):
        this = _tv.new_TWindowInit(cFrame)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def defaultInitFrame(self, rect):
        return _tv.TWindowInit_defaultInitFrame(self, rect)
    __swig_destroy__ = _tv.delete_TWindowInit
    __del__ = lambda self: None
TWindowInit_swigregister = _tv.TWindowInit_swigregister
TWindowInit_swigregister(TWindowInit)

class TWindow(TGroup, TWindowInit):
    __swig_setmethods__ = {}
    for _s in [TGroup, TWindowInit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [TGroup, TWindowInit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TWindow, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aTitle, aNumber):
        if self.__class__ == TWindow:
            _self = None
        else:
            _self = self
        this = _tv.new_TWindow(_self, bounds, aTitle, aNumber)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TWindow
    __del__ = lambda self: None

    def close(self):
        return _tv.TWindow_close(self)

    def getPalette(self):
        return _tv.TWindow_getPalette(self)

    def getTitle(self, maxSize):
        return _tv.TWindow_getTitle(self, maxSize)

    def handleEvent(self, event):
        return _tv.TWindow_handleEvent(self, event)
    if _newclass:
        initFrame = staticmethod(_tv.TWindow_initFrame)
    else:
        initFrame = _tv.TWindow_initFrame

    def setState(self, aState, enable):
        return _tv.TWindow_setState(self, aState, enable)

    def sizeLimits(self, min, max):
        return _tv.TWindow_sizeLimits(self, min, max)

    def standardScrollBar(self, aOptions):
        return _tv.TWindow_standardScrollBar(self, aOptions)

    def zoom(self):
        return _tv.TWindow_zoom(self)

    def shutDown(self):
        return _tv.TWindow_shutDown(self)
    __swig_setmethods__["flags"] = _tv.TWindow_flags_set
    __swig_getmethods__["flags"] = _tv.TWindow_flags_get
    if _newclass:
        flags = _swig_property(_tv.TWindow_flags_get, _tv.TWindow_flags_set)
    __swig_setmethods__["zoomRect"] = _tv.TWindow_zoomRect_set
    __swig_getmethods__["zoomRect"] = _tv.TWindow_zoomRect_get
    if _newclass:
        zoomRect = _swig_property(_tv.TWindow_zoomRect_get, _tv.TWindow_zoomRect_set)
    __swig_setmethods__["number"] = _tv.TWindow_number_set
    __swig_getmethods__["number"] = _tv.TWindow_number_get
    if _newclass:
        number = _swig_property(_tv.TWindow_number_get, _tv.TWindow_number_set)
    __swig_setmethods__["palette"] = _tv.TWindow_palette_set
    __swig_getmethods__["palette"] = _tv.TWindow_palette_get
    if _newclass:
        palette = _swig_property(_tv.TWindow_palette_get, _tv.TWindow_palette_set)
    __swig_setmethods__["frame"] = _tv.TWindow_frame_set
    __swig_getmethods__["frame"] = _tv.TWindow_frame_get
    if _newclass:
        frame = _swig_property(_tv.TWindow_frame_get, _tv.TWindow_frame_set)
    __swig_setmethods__["title"] = _tv.TWindow_title_set
    __swig_getmethods__["title"] = _tv.TWindow_title_get
    if _newclass:
        title = _swig_property(_tv.TWindow_title_get, _tv.TWindow_title_set)
    __swig_setmethods__["intlTitle"] = _tv.TWindow_intlTitle_set
    __swig_getmethods__["intlTitle"] = _tv.TWindow_intlTitle_get
    if _newclass:
        intlTitle = _swig_property(_tv.TWindow_intlTitle_get, _tv.TWindow_intlTitle_set)
    def __disown__(self):
        self.this.disown()
        _tv.disown_TWindow(self)
        return weakref_proxy(self)
TWindow_swigregister = _tv.TWindow_swigregister
TWindow_swigregister(TWindow)

def TWindow_initFrame(arg2):
    return _tv.TWindow_initFrame(arg2)
TWindow_initFrame = _tv.TWindow_initFrame

class TScrollBar(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TScrollBar, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TScrollBar, name)
    __repr__ = _swig_repr

    def __init__(self, bounds):
        this = _tv.new_TScrollBar(bounds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def draw(self):
        return _tv.TScrollBar_draw(self)

    def getPalette(self):
        return _tv.TScrollBar_getPalette(self)

    def handleEvent(self, event):
        return _tv.TScrollBar_handleEvent(self, event)

    def scrollDraw(self):
        return _tv.TScrollBar_scrollDraw(self)

    def scrollStep(self, part):
        return _tv.TScrollBar_scrollStep(self, part)

    def setParams(self, aValue, aMin, aMax, aPgStep, aArStep):
        return _tv.TScrollBar_setParams(self, aValue, aMin, aMax, aPgStep, aArStep)

    def setRange(self, aMin, aMax):
        return _tv.TScrollBar_setRange(self, aMin, aMax)

    def setStep(self, aPgStep, aArStep):
        return _tv.TScrollBar_setStep(self, aPgStep, aArStep)

    def setValue(self, aValue):
        return _tv.TScrollBar_setValue(self, aValue)

    def drawPos(self, pos):
        return _tv.TScrollBar_drawPos(self, pos)

    def getPos(self):
        return _tv.TScrollBar_getPos(self)

    def getSize(self):
        return _tv.TScrollBar_getSize(self)
    __swig_setmethods__["value"] = _tv.TScrollBar_value_set
    __swig_getmethods__["value"] = _tv.TScrollBar_value_get
    if _newclass:
        value = _swig_property(_tv.TScrollBar_value_get, _tv.TScrollBar_value_set)
    __swig_setmethods__["chars"] = _tv.TScrollBar_chars_set
    __swig_getmethods__["chars"] = _tv.TScrollBar_chars_get
    if _newclass:
        chars = _swig_property(_tv.TScrollBar_chars_get, _tv.TScrollBar_chars_set)
    __swig_setmethods__["minVal"] = _tv.TScrollBar_minVal_set
    __swig_getmethods__["minVal"] = _tv.TScrollBar_minVal_get
    if _newclass:
        minVal = _swig_property(_tv.TScrollBar_minVal_get, _tv.TScrollBar_minVal_set)
    __swig_setmethods__["maxVal"] = _tv.TScrollBar_maxVal_set
    __swig_getmethods__["maxVal"] = _tv.TScrollBar_maxVal_get
    if _newclass:
        maxVal = _swig_property(_tv.TScrollBar_maxVal_get, _tv.TScrollBar_maxVal_set)
    __swig_setmethods__["pgStep"] = _tv.TScrollBar_pgStep_set
    __swig_getmethods__["pgStep"] = _tv.TScrollBar_pgStep_get
    if _newclass:
        pgStep = _swig_property(_tv.TScrollBar_pgStep_get, _tv.TScrollBar_pgStep_set)
    __swig_setmethods__["arStep"] = _tv.TScrollBar_arStep_set
    __swig_getmethods__["arStep"] = _tv.TScrollBar_arStep_get
    if _newclass:
        arStep = _swig_property(_tv.TScrollBar_arStep_get, _tv.TScrollBar_arStep_set)
    __swig_setmethods__["vChars"] = _tv.TScrollBar_vChars_set
    __swig_getmethods__["vChars"] = _tv.TScrollBar_vChars_get
    if _newclass:
        vChars = _swig_property(_tv.TScrollBar_vChars_get, _tv.TScrollBar_vChars_set)
    __swig_setmethods__["hChars"] = _tv.TScrollBar_hChars_set
    __swig_getmethods__["hChars"] = _tv.TScrollBar_hChars_get
    if _newclass:
        hChars = _swig_property(_tv.TScrollBar_hChars_get, _tv.TScrollBar_hChars_set)
    __swig_setmethods__["ovChars"] = _tv.TScrollBar_ovChars_set
    __swig_getmethods__["ovChars"] = _tv.TScrollBar_ovChars_get
    if _newclass:
        ovChars = _swig_property(_tv.TScrollBar_ovChars_get, _tv.TScrollBar_ovChars_set)
    __swig_setmethods__["ohChars"] = _tv.TScrollBar_ohChars_set
    __swig_getmethods__["ohChars"] = _tv.TScrollBar_ohChars_get
    if _newclass:
        ohChars = _swig_property(_tv.TScrollBar_ohChars_get, _tv.TScrollBar_ohChars_set)
    __swig_destroy__ = _tv.delete_TScrollBar
    __del__ = lambda self: None
TScrollBar_swigregister = _tv.TScrollBar_swigregister
TScrollBar_swigregister(TScrollBar)

class TScroller(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TScroller, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TScroller, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aHScrollBar, aVScrollBar):
        this = _tv.new_TScroller(bounds, aHScrollBar, aVScrollBar)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def changeBounds(self, bounds):
        return _tv.TScroller_changeBounds(self, bounds)

    def getPalette(self):
        return _tv.TScroller_getPalette(self)

    def handleEvent(self, event):
        return _tv.TScroller_handleEvent(self, event)

    def scrollDraw(self):
        return _tv.TScroller_scrollDraw(self)

    def scrollTo(self, x, y):
        return _tv.TScroller_scrollTo(self, x, y)

    def setLimit(self, x, y):
        return _tv.TScroller_setLimit(self, x, y)

    def setState(self, aState, enable):
        return _tv.TScroller_setState(self, aState, enable)

    def checkDraw(self):
        return _tv.TScroller_checkDraw(self)

    def shutDown(self):
        return _tv.TScroller_shutDown(self)
    __swig_setmethods__["defaultWheelStep"] = _tv.TScroller_defaultWheelStep_set
    __swig_getmethods__["defaultWheelStep"] = _tv.TScroller_defaultWheelStep_get
    if _newclass:
        defaultWheelStep = _swig_property(_tv.TScroller_defaultWheelStep_get, _tv.TScroller_defaultWheelStep_set)
    __swig_setmethods__["wheelStep"] = _tv.TScroller_wheelStep_set
    __swig_getmethods__["wheelStep"] = _tv.TScroller_wheelStep_get
    if _newclass:
        wheelStep = _swig_property(_tv.TScroller_wheelStep_get, _tv.TScroller_wheelStep_set)
    __swig_destroy__ = _tv.delete_TScroller
    __del__ = lambda self: None
TScroller_swigregister = _tv.TScroller_swigregister
TScroller_swigregister(TScroller)

class TButton(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TButton, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TButton, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aTitle, aCommand, aFlags):
        this = _tv.new_TButton(bounds, aTitle, aCommand, aFlags)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TButton
    __del__ = lambda self: None

    def draw(self):
        return _tv.TButton_draw(self)

    def drawState(self, down):
        return _tv.TButton_drawState(self, down)

    def getPalette(self):
        return _tv.TButton_getPalette(self)

    def handleEvent(self, event):
        return _tv.TButton_handleEvent(self, event)

    def makeDefault(self, enable):
        return _tv.TButton_makeDefault(self, enable)

    def press(self):
        return _tv.TButton_press(self)

    def setState(self, aState, enable):
        return _tv.TButton_setState(self, aState, enable)

    def setCallBack(self, cb):
        return _tv.TButton_setCallBack(self, cb)

    def getText(self):
        return _tv.TButton_getText(self)
    __swig_setmethods__["title"] = _tv.TButton_title_set
    __swig_getmethods__["title"] = _tv.TButton_title_get
    if _newclass:
        title = _swig_property(_tv.TButton_title_get, _tv.TButton_title_set)
    __swig_setmethods__["intlTitle"] = _tv.TButton_intlTitle_set
    __swig_getmethods__["intlTitle"] = _tv.TButton_intlTitle_get
    if _newclass:
        intlTitle = _swig_property(_tv.TButton_intlTitle_get, _tv.TButton_intlTitle_set)
TButton_swigregister = _tv.TButton_swigregister
TButton_swigregister(TButton)
btcbGoOn = cvar.btcbGoOn
btcbEndModal = cvar.btcbEndModal

class TInputLineBase(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TInputLineBase, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TInputLineBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tv.delete_TInputLineBase
    __del__ = lambda self: None

    def dataSize(self):
        return _tv.TInputLineBase_dataSize(self)

    def getPalette(self):
        return _tv.TInputLineBase_getPalette(self)

    def handleEvent(self, event):
        return _tv.TInputLineBase_handleEvent(self, event)

    def selectAll(self, enable):
        return _tv.TInputLineBase_selectAll(self, enable)

    def setState(self, aState, enable):
        return _tv.TInputLineBase_setState(self, aState, enable)

    def SetValidator(self, arg2):
        return _tv.TInputLineBase_SetValidator(self, arg2)

    def valid(self, arg2):
        return _tv.TInputLineBase_valid(self, arg2)

    def insertChar(self, *args):
        return _tv.TInputLineBase_insertChar(self, *args)

    def assignPos(self, index, val):
        return _tv.TInputLineBase_assignPos(self, index, val)

    def pasteFromOSClipboard(self):
        return _tv.TInputLineBase_pasteFromOSClipboard(self)

    def copyToOSClipboard(self):
        return _tv.TInputLineBase_copyToOSClipboard(self)

    def setDataFromStr(self, str):
        return _tv.TInputLineBase_setDataFromStr(self, str)

    def getData(self):
        return _tv.TInputLineBase_getData(self)
    __swig_setmethods__["curPos"] = _tv.TInputLineBase_curPos_set
    __swig_getmethods__["curPos"] = _tv.TInputLineBase_curPos_get
    if _newclass:
        curPos = _swig_property(_tv.TInputLineBase_curPos_get, _tv.TInputLineBase_curPos_set)
    __swig_setmethods__["firstPos"] = _tv.TInputLineBase_firstPos_set
    __swig_getmethods__["firstPos"] = _tv.TInputLineBase_firstPos_get
    if _newclass:
        firstPos = _swig_property(_tv.TInputLineBase_firstPos_get, _tv.TInputLineBase_firstPos_set)
    __swig_setmethods__["selStart"] = _tv.TInputLineBase_selStart_set
    __swig_getmethods__["selStart"] = _tv.TInputLineBase_selStart_get
    if _newclass:
        selStart = _swig_property(_tv.TInputLineBase_selStart_get, _tv.TInputLineBase_selStart_set)
    __swig_setmethods__["selEnd"] = _tv.TInputLineBase_selEnd_set
    __swig_getmethods__["selEnd"] = _tv.TInputLineBase_selEnd_get
    if _newclass:
        selEnd = _swig_property(_tv.TInputLineBase_selEnd_get, _tv.TInputLineBase_selEnd_set)
    __swig_setmethods__["rightArrow"] = _tv.TInputLineBase_rightArrow_set
    __swig_getmethods__["rightArrow"] = _tv.TInputLineBase_rightArrow_get
    if _newclass:
        rightArrow = _swig_property(_tv.TInputLineBase_rightArrow_get, _tv.TInputLineBase_rightArrow_set)
    __swig_setmethods__["leftArrow"] = _tv.TInputLineBase_leftArrow_set
    __swig_getmethods__["leftArrow"] = _tv.TInputLineBase_leftArrow_get
    if _newclass:
        leftArrow = _swig_property(_tv.TInputLineBase_leftArrow_get, _tv.TInputLineBase_leftArrow_set)
    __swig_setmethods__["orightArrow"] = _tv.TInputLineBase_orightArrow_set
    __swig_getmethods__["orightArrow"] = _tv.TInputLineBase_orightArrow_get
    if _newclass:
        orightArrow = _swig_property(_tv.TInputLineBase_orightArrow_get, _tv.TInputLineBase_orightArrow_set)
    __swig_setmethods__["oleftArrow"] = _tv.TInputLineBase_oleftArrow_set
    __swig_getmethods__["oleftArrow"] = _tv.TInputLineBase_oleftArrow_get
    if _newclass:
        oleftArrow = _swig_property(_tv.TInputLineBase_oleftArrow_get, _tv.TInputLineBase_oleftArrow_set)
TInputLineBase_swigregister = _tv.TInputLineBase_swigregister
TInputLineBase_swigregister(TInputLineBase)

class TInputLineBaseChar(TInputLineBase):
    __swig_setmethods__ = {}
    for _s in [TInputLineBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TInputLineBaseChar, name, value)
    __swig_getmethods__ = {}
    for _s in [TInputLineBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TInputLineBaseChar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setData(self, rec):
        return _tv.TInputLineBaseChar_setData(self, rec)

    def setDataFromStr(self, str):
        return _tv.TInputLineBaseChar_setDataFromStr(self, str)

    def assignPos(self, index, val):
        return _tv.TInputLineBaseChar_assignPos(self, index, val)

    def pasteFromOSClipboard(self):
        return _tv.TInputLineBaseChar_pasteFromOSClipboard(self)

    def copyToOSClipboard(self):
        return _tv.TInputLineBaseChar_copyToOSClipboard(self)

    def draw(self):
        return _tv.TInputLineBaseChar_draw(self)
    __swig_destroy__ = _tv.delete_TInputLineBaseChar
    __del__ = lambda self: None
TInputLineBaseChar_swigregister = _tv.TInputLineBaseChar_swigregister
TInputLineBaseChar_swigregister(TInputLineBaseChar)

class TInputLine(TInputLineBaseChar):
    __swig_setmethods__ = {}
    for _s in [TInputLineBaseChar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TInputLine, name, value)
    __swig_getmethods__ = {}
    for _s in [TInputLineBaseChar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TInputLine, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aMaxLen):
        this = _tv.new_TInputLine(bounds, aMaxLen)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def insertChar(self, event):
        return _tv.TInputLine_insertChar(self, event)
    __swig_destroy__ = _tv.delete_TInputLine
    __del__ = lambda self: None
TInputLine_swigregister = _tv.TInputLine_swigregister
TInputLine_swigregister(TInputLine)

class TInputLineBaseU16(TInputLineBase):
    __swig_setmethods__ = {}
    for _s in [TInputLineBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TInputLineBaseU16, name, value)
    __swig_getmethods__ = {}
    for _s in [TInputLineBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TInputLineBaseU16, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setData(self, rec):
        return _tv.TInputLineBaseU16_setData(self, rec)

    def setDataFromStr(self, str):
        return _tv.TInputLineBaseU16_setDataFromStr(self, str)

    def assignPos(self, index, val):
        return _tv.TInputLineBaseU16_assignPos(self, index, val)

    def pasteFromOSClipboard(self):
        return _tv.TInputLineBaseU16_pasteFromOSClipboard(self)

    def copyToOSClipboard(self):
        return _tv.TInputLineBaseU16_copyToOSClipboard(self)

    def draw(self):
        return _tv.TInputLineBaseU16_draw(self)
    __swig_destroy__ = _tv.delete_TInputLineBaseU16
    __del__ = lambda self: None
TInputLineBaseU16_swigregister = _tv.TInputLineBaseU16_swigregister
TInputLineBaseU16_swigregister(TInputLineBaseU16)

class TInputLineU16(TInputLineBaseU16):
    __swig_setmethods__ = {}
    for _s in [TInputLineBaseU16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TInputLineU16, name, value)
    __swig_getmethods__ = {}
    for _s in [TInputLineBaseU16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TInputLineU16, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aMaxLen):
        this = _tv.new_TInputLineU16(bounds, aMaxLen)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def insertChar(self, event):
        return _tv.TInputLineU16_insertChar(self, event)
    __swig_destroy__ = _tv.delete_TInputLineU16
    __del__ = lambda self: None
TInputLineU16_swigregister = _tv.TInputLineU16_swigregister
TInputLineU16_swigregister(TInputLineU16)

class TStaticText(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TStaticText, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TStaticText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TStaticText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TStaticText
    __del__ = lambda self: None

    def draw(self):
        return _tv.TStaticText_draw(self)

    def getPalette(self):
        return _tv.TStaticText_getPalette(self)

    def getText(self, *args):
        return _tv.TStaticText_getText(self, *args)
TStaticText_swigregister = _tv.TStaticText_swigregister
TStaticText_swigregister(TStaticText)

class T1StaticText(TStaticText):
    __swig_setmethods__ = {}
    for _s in [TStaticText]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, T1StaticText, name, value)
    __swig_getmethods__ = {}
    for _s in [TStaticText]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, T1StaticText, name)
    __repr__ = _swig_repr

    def __init__(self, x, y, aText):
        this = _tv.new_T1StaticText(x, y, aText)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_T1StaticText
    __del__ = lambda self: None
T1StaticText_swigregister = _tv.T1StaticText_swigregister
T1StaticText_swigregister(T1StaticText)

class TLabel(TStaticText):
    __swig_setmethods__ = {}
    for _s in [TStaticText]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [TStaticText]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TLabel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def draw(self):
        return _tv.TLabel_draw(self)

    def getPalette(self):
        return _tv.TLabel_getPalette(self)

    def handleEvent(self, event):
        return _tv.TLabel_handleEvent(self, event)

    def shutDown(self):
        return _tv.TLabel_shutDown(self)
    __swig_setmethods__["link"] = _tv.TLabel_link_set
    __swig_getmethods__["link"] = _tv.TLabel_link_get
    if _newclass:
        link = _swig_property(_tv.TLabel_link_get, _tv.TLabel_link_set)
    __swig_destroy__ = _tv.delete_TLabel
    __del__ = lambda self: None
TLabel_swigregister = _tv.TLabel_swigregister
TLabel_swigregister(TLabel)

class T1Label(TLabel):
    __swig_setmethods__ = {}
    for _s in [TLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, T1Label, name, value)
    __swig_getmethods__ = {}
    for _s in [TLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, T1Label, name)
    __repr__ = _swig_repr

    def __init__(self, x, y, aText, aLink):
        this = _tv.new_T1Label(x, y, aText, aLink)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_T1Label
    __del__ = lambda self: None
T1Label_swigregister = _tv.T1Label_swigregister
T1Label_swigregister(T1Label)

class TSItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSItem, name)
    __repr__ = _swig_repr

    def __init__(self, aValue, aNext):
        this = _tv.new_TSItem(aValue, aNext)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TSItem
    __del__ = lambda self: None

    def append(self, aNext):
        return _tv.TSItem_append(self, aNext)

    def __add__(self, b):
        self.append(b)
        return self

    __swig_setmethods__["value"] = _tv.TSItem_value_set
    __swig_getmethods__["value"] = _tv.TSItem_value_get
    if _newclass:
        value = _swig_property(_tv.TSItem_value_get, _tv.TSItem_value_set)
    __swig_setmethods__["next"] = _tv.TSItem_next_set
    __swig_getmethods__["next"] = _tv.TSItem_next_get
    if _newclass:
        next = _swig_property(_tv.TSItem_next_get, _tv.TSItem_next_set)
TSItem_swigregister = _tv.TSItem_swigregister
TSItem_swigregister(TSItem)

class TCluster(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCluster, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCluster, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aStrings):
        this = _tv.new_TCluster(bounds, aStrings)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TCluster
    __del__ = lambda self: None

    def dataSize(self):
        return _tv.TCluster_dataSize(self)

    def drawBox(self, icon, marker):
        return _tv.TCluster_drawBox(self, icon, marker)

    def getData(self, rec):
        return _tv.TCluster_getData(self, rec)

    def getHelpCtx(self):
        return _tv.TCluster_getHelpCtx(self)

    def getPalette(self):
        return _tv.TCluster_getPalette(self)

    def handleEvent(self, event):
        return _tv.TCluster_handleEvent(self, event)

    def mark(self, item):
        return _tv.TCluster_mark(self, item)

    def press(self, item):
        return _tv.TCluster_press(self, item)

    def movedTo(self, item):
        return _tv.TCluster_movedTo(self, item)

    def setData(self, rec):
        return _tv.TCluster_setData(self, rec)

    def setState(self, aState, enable):
        return _tv.TCluster_setState(self, aState, enable)

    def getExtraOptions(self):
        return _tv.TCluster_getExtraOptions(self)

    def setExtraOptions(self, ops):
        return _tv.TCluster_setExtraOptions(self, ops)

    def getItemText(self, item):
        return _tv.TCluster_getItemText(self, item)
TCluster_swigregister = _tv.TCluster_swigregister
TCluster_swigregister(TCluster)

class TRadioButtons(TCluster):
    __swig_setmethods__ = {}
    for _s in [TCluster]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRadioButtons, name, value)
    __swig_getmethods__ = {}
    for _s in [TCluster]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRadioButtons, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aStrings):
        this = _tv.new_TRadioButtons(bounds, aStrings)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def draw(self):
        return _tv.TRadioButtons_draw(self)

    def mark(self, item):
        return _tv.TRadioButtons_mark(self, item)

    def movedTo(self, item):
        return _tv.TRadioButtons_movedTo(self, item)

    def press(self, item):
        return _tv.TRadioButtons_press(self, item)

    def setData(self, rec):
        return _tv.TRadioButtons_setData(self, rec)
    __swig_setmethods__["check"] = _tv.TRadioButtons_check_set
    __swig_getmethods__["check"] = _tv.TRadioButtons_check_get
    if _newclass:
        check = _swig_property(_tv.TRadioButtons_check_get, _tv.TRadioButtons_check_set)
    __swig_setmethods__["ocheck"] = _tv.TRadioButtons_ocheck_set
    __swig_getmethods__["ocheck"] = _tv.TRadioButtons_ocheck_get
    if _newclass:
        ocheck = _swig_property(_tv.TRadioButtons_ocheck_get, _tv.TRadioButtons_ocheck_set)
    __swig_destroy__ = _tv.delete_TRadioButtons
    __del__ = lambda self: None
TRadioButtons_swigregister = _tv.TRadioButtons_swigregister
TRadioButtons_swigregister(TRadioButtons)

class TRadioButtons32(TRadioButtons):
    __swig_setmethods__ = {}
    for _s in [TRadioButtons]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRadioButtons32, name, value)
    __swig_getmethods__ = {}
    for _s in [TRadioButtons]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRadioButtons32, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aStrings):
        this = _tv.new_TRadioButtons32(bounds, aStrings)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dataSize(self):
        return _tv.TRadioButtons32_dataSize(self)
    __swig_destroy__ = _tv.delete_TRadioButtons32
    __del__ = lambda self: None
TRadioButtons32_swigregister = _tv.TRadioButtons32_swigregister
TRadioButtons32_swigregister(TRadioButtons32)

class TCheckBoxes(TCluster):
    __swig_setmethods__ = {}
    for _s in [TCluster]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCheckBoxes, name, value)
    __swig_getmethods__ = {}
    for _s in [TCluster]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCheckBoxes, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aStrings):
        this = _tv.new_TCheckBoxes(bounds, aStrings)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def draw(self):
        return _tv.TCheckBoxes_draw(self)

    def mark(self, item):
        return _tv.TCheckBoxes_mark(self, item)

    def press(self, item):
        return _tv.TCheckBoxes_press(self, item)
    __swig_destroy__ = _tv.delete_TCheckBoxes
    __del__ = lambda self: None
TCheckBoxes_swigregister = _tv.TCheckBoxes_swigregister
TCheckBoxes_swigregister(TCheckBoxes)

class TCheckBoxes32(TCheckBoxes):
    __swig_setmethods__ = {}
    for _s in [TCheckBoxes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCheckBoxes32, name, value)
    __swig_getmethods__ = {}
    for _s in [TCheckBoxes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCheckBoxes32, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aStrings):
        this = _tv.new_TCheckBoxes32(bounds, aStrings)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dataSize(self):
        return _tv.TCheckBoxes32_dataSize(self)
    __swig_destroy__ = _tv.delete_TCheckBoxes32
    __del__ = lambda self: None
TCheckBoxes32_swigregister = _tv.TCheckBoxes32_swigregister
TCheckBoxes32_swigregister(TCheckBoxes32)

class TMenuItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMenuItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMenuItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TMenuItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TMenuItem
    __del__ = lambda self: None

    def append(self, aNext):
        return _tv.TMenuItem_append(self, aNext)

    def append(self, p):
        p.thisown = 0
        return _tv.TMenuItem_append(self, p)

    __swig_setmethods__["next"] = _tv.TMenuItem_next_set
    __swig_getmethods__["next"] = _tv.TMenuItem_next_get
    if _newclass:
        next = _swig_property(_tv.TMenuItem_next_get, _tv.TMenuItem_next_set)
    __swig_setmethods__["name"] = _tv.TMenuItem_name_set
    __swig_getmethods__["name"] = _tv.TMenuItem_name_get
    if _newclass:
        name = _swig_property(_tv.TMenuItem_name_get, _tv.TMenuItem_name_set)
    __swig_setmethods__["intlName"] = _tv.TMenuItem_intlName_set
    __swig_getmethods__["intlName"] = _tv.TMenuItem_intlName_get
    if _newclass:
        intlName = _swig_property(_tv.TMenuItem_intlName_get, _tv.TMenuItem_intlName_set)
    __swig_setmethods__["command"] = _tv.TMenuItem_command_set
    __swig_getmethods__["command"] = _tv.TMenuItem_command_get
    if _newclass:
        command = _swig_property(_tv.TMenuItem_command_get, _tv.TMenuItem_command_set)
    __swig_setmethods__["disabled"] = _tv.TMenuItem_disabled_set
    __swig_getmethods__["disabled"] = _tv.TMenuItem_disabled_get
    if _newclass:
        disabled = _swig_property(_tv.TMenuItem_disabled_get, _tv.TMenuItem_disabled_set)
    __swig_setmethods__["keyCode"] = _tv.TMenuItem_keyCode_set
    __swig_getmethods__["keyCode"] = _tv.TMenuItem_keyCode_get
    if _newclass:
        keyCode = _swig_property(_tv.TMenuItem_keyCode_get, _tv.TMenuItem_keyCode_set)
    __swig_setmethods__["helpCtx"] = _tv.TMenuItem_helpCtx_set
    __swig_getmethods__["helpCtx"] = _tv.TMenuItem_helpCtx_get
    if _newclass:
        helpCtx = _swig_property(_tv.TMenuItem_helpCtx_get, _tv.TMenuItem_helpCtx_set)
TMenuItem_swigregister = _tv.TMenuItem_swigregister
TMenuItem_swigregister(TMenuItem)

class TSubMenu(TMenuItem):
    __swig_setmethods__ = {}
    for _s in [TMenuItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSubMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [TMenuItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TSubMenu, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4=_tv.hcNoContext):
        this = _tv.new_TSubMenu(arg2, arg3, arg4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TSubMenu
    __del__ = lambda self: None
TSubMenu_swigregister = _tv.TSubMenu_swigregister
TSubMenu_swigregister(TSubMenu)


def makeMenu__(args):
    return _tv.makeMenu__(args)
makeMenu__ = _tv.makeMenu__

def cMakeMenu(args):
    return _tv.cMakeMenu(args)
cMakeMenu = _tv.cMakeMenu
class TMenu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMenu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMenu, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TMenu(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TMenu
    __del__ = lambda self: None
    __swig_setmethods__["items"] = _tv.TMenu_items_set
    __swig_getmethods__["items"] = _tv.TMenu_items_get
    if _newclass:
        items = _swig_property(_tv.TMenu_items_get, _tv.TMenu_items_set)
    __swig_setmethods__["deflt"] = _tv.TMenu_deflt_set
    __swig_getmethods__["deflt"] = _tv.TMenu_deflt_get
    if _newclass:
        deflt = _swig_property(_tv.TMenu_deflt_get, _tv.TMenu_deflt_set)
TMenu_swigregister = _tv.TMenu_swigregister
TMenu_swigregister(TMenu)

class TMenuView(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMenuView, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMenuView, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TMenuView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def execute(self):
        return _tv.TMenuView_execute(self)

    def findItem(self, ch):
        return _tv.TMenuView_findItem(self, ch)

    def getItemRect(self, item):
        return _tv.TMenuView_getItemRect(self, item)

    def getHelpCtx(self):
        return _tv.TMenuView_getHelpCtx(self)

    def getPalette(self):
        return _tv.TMenuView_getPalette(self)

    def handleEvent(self, event):
        return _tv.TMenuView_handleEvent(self, event)

    def hotKey(self, keyCode):
        return _tv.TMenuView_hotKey(self, keyCode)

    def newSubView(self, bounds, aMenu, aParentMenu):
        return _tv.TMenuView_newSubView(self, bounds, aMenu, aParentMenu)
    __swig_setmethods__["compactMenu"] = _tv.TMenuView_compactMenu_set
    __swig_getmethods__["compactMenu"] = _tv.TMenuView_compactMenu_get
    if _newclass:
        compactMenu = _swig_property(_tv.TMenuView_compactMenu_get, _tv.TMenuView_compactMenu_set)
    __swig_destroy__ = _tv.delete_TMenuView
    __del__ = lambda self: None
TMenuView_swigregister = _tv.TMenuView_swigregister
TMenuView_swigregister(TMenuView)

class TMenuBox(TMenuView):
    __swig_setmethods__ = {}
    for _s in [TMenuView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMenuBox, name, value)
    __swig_getmethods__ = {}
    for _s in [TMenuView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMenuBox, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aMenu, aParentMenu):
        this = _tv.new_TMenuBox(bounds, aMenu, aParentMenu)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def draw(self):
        return _tv.TMenuBox_draw(self)

    def getItemRect(self, item):
        return _tv.TMenuBox_getItemRect(self, item)
    __swig_setmethods__["frameChars"] = _tv.TMenuBox_frameChars_set
    __swig_getmethods__["frameChars"] = _tv.TMenuBox_frameChars_get
    if _newclass:
        frameChars = _swig_property(_tv.TMenuBox_frameChars_get, _tv.TMenuBox_frameChars_set)
    __swig_setmethods__["oframeChars"] = _tv.TMenuBox_oframeChars_set
    __swig_getmethods__["oframeChars"] = _tv.TMenuBox_oframeChars_get
    if _newclass:
        oframeChars = _swig_property(_tv.TMenuBox_oframeChars_get, _tv.TMenuBox_oframeChars_set)
    __swig_setmethods__["rightArrow"] = _tv.TMenuBox_rightArrow_set
    __swig_getmethods__["rightArrow"] = _tv.TMenuBox_rightArrow_get
    if _newclass:
        rightArrow = _swig_property(_tv.TMenuBox_rightArrow_get, _tv.TMenuBox_rightArrow_set)
    __swig_setmethods__["orightArrow"] = _tv.TMenuBox_orightArrow_set
    __swig_getmethods__["orightArrow"] = _tv.TMenuBox_orightArrow_get
    if _newclass:
        orightArrow = _swig_property(_tv.TMenuBox_orightArrow_get, _tv.TMenuBox_orightArrow_set)
    __swig_destroy__ = _tv.delete_TMenuBox
    __del__ = lambda self: None
TMenuBox_swigregister = _tv.TMenuBox_swigregister
TMenuBox_swigregister(TMenuBox)

class TMenuBar(TMenuView):
    __swig_setmethods__ = {}
    for _s in [TMenuView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMenuBar, name, value)
    __swig_getmethods__ = {}
    for _s in [TMenuView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMenuBar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TMenuBar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TMenuBar
    __del__ = lambda self: None

    def computeLength(self):
        return _tv.TMenuBar_computeLength(self)

    def draw(self):
        return _tv.TMenuBar_draw(self)

    def getItemRect(self, item):
        return _tv.TMenuBar_getItemRect(self, item)

    def changeBounds(self, bounds):
        return _tv.TMenuBar_changeBounds(self, bounds)
TMenuBar_swigregister = _tv.TMenuBar_swigregister
TMenuBar_swigregister(TMenuBar)

class TStatusItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TStatusItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TStatusItem, name)
    __repr__ = _swig_repr

    def __init__(self, aText, key, cmd, aNext=None):
        this = _tv.new_TStatusItem(aText, key, cmd, aNext)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TStatusItem
    __del__ = lambda self: None
    __swig_setmethods__["next"] = _tv.TStatusItem_next_set
    __swig_getmethods__["next"] = _tv.TStatusItem_next_get
    if _newclass:
        next = _swig_property(_tv.TStatusItem_next_get, _tv.TStatusItem_next_set)
    __swig_setmethods__["text"] = _tv.TStatusItem_text_set
    __swig_getmethods__["text"] = _tv.TStatusItem_text_get
    if _newclass:
        text = _swig_property(_tv.TStatusItem_text_get, _tv.TStatusItem_text_set)
    __swig_setmethods__["intlText"] = _tv.TStatusItem_intlText_set
    __swig_getmethods__["intlText"] = _tv.TStatusItem_intlText_get
    if _newclass:
        intlText = _swig_property(_tv.TStatusItem_intlText_get, _tv.TStatusItem_intlText_set)
    __swig_setmethods__["keyCode"] = _tv.TStatusItem_keyCode_set
    __swig_getmethods__["keyCode"] = _tv.TStatusItem_keyCode_get
    if _newclass:
        keyCode = _swig_property(_tv.TStatusItem_keyCode_get, _tv.TStatusItem_keyCode_set)
    __swig_setmethods__["command"] = _tv.TStatusItem_command_set
    __swig_getmethods__["command"] = _tv.TStatusItem_command_get
    if _newclass:
        command = _swig_property(_tv.TStatusItem_command_get, _tv.TStatusItem_command_set)
TStatusItem_swigregister = _tv.TStatusItem_swigregister
TStatusItem_swigregister(TStatusItem)

class TStatusDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TStatusDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TStatusDef, name)
    __repr__ = _swig_repr

    def __init__(self, aMin, aMax, someItems=None, aNext=None):
        this = _tv.new_TStatusDef(aMin, aMax, someItems, aNext)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["next"] = _tv.TStatusDef_next_set
    __swig_getmethods__["next"] = _tv.TStatusDef_next_get
    if _newclass:
        next = _swig_property(_tv.TStatusDef_next_get, _tv.TStatusDef_next_set)
    __swig_setmethods__["min"] = _tv.TStatusDef_min_set
    __swig_getmethods__["min"] = _tv.TStatusDef_min_get
    if _newclass:
        min = _swig_property(_tv.TStatusDef_min_get, _tv.TStatusDef_min_set)
    __swig_setmethods__["max"] = _tv.TStatusDef_max_set
    __swig_getmethods__["max"] = _tv.TStatusDef_max_get
    if _newclass:
        max = _swig_property(_tv.TStatusDef_max_get, _tv.TStatusDef_max_set)
    __swig_setmethods__["items"] = _tv.TStatusDef_items_set
    __swig_getmethods__["items"] = _tv.TStatusDef_items_get
    if _newclass:
        items = _swig_property(_tv.TStatusDef_items_get, _tv.TStatusDef_items_set)
    __swig_destroy__ = _tv.delete_TStatusDef
    __del__ = lambda self: None
TStatusDef_swigregister = _tv.TStatusDef_swigregister
TStatusDef_swigregister(TStatusDef)

class TStatusLine(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TStatusLine, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TStatusLine, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aDefs):
        this = _tv.new_TStatusLine(bounds, aDefs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TStatusLine
    __del__ = lambda self: None

    def draw(self):
        return _tv.TStatusLine_draw(self)

    def getPalette(self):
        return _tv.TStatusLine_getPalette(self)

    def handleEvent(self, event):
        return _tv.TStatusLine_handleEvent(self, event)

    def hint(self, aHelpCtx):
        return _tv.TStatusLine_hint(self, aHelpCtx)

    def update(self):
        return _tv.TStatusLine_update(self)

    def computeLength(self):
        return _tv.TStatusLine_computeLength(self)

    def changeBounds(self, bounds):
        return _tv.TStatusLine_changeBounds(self, bounds)
    __swig_setmethods__["compactStatus"] = _tv.TStatusLine_compactStatus_set
    __swig_getmethods__["compactStatus"] = _tv.TStatusLine_compactStatus_get
    if _newclass:
        compactStatus = _swig_property(_tv.TStatusLine_compactStatus_get, _tv.TStatusLine_compactStatus_set)
TStatusLine_swigregister = _tv.TStatusLine_swigregister
TStatusLine_swigregister(TStatusLine)

dsktTileVertical = _tv.dsktTileVertical
dsktTileHorizontal = _tv.dsktTileHorizontal
class TDeskInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDeskInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDeskInit, name)
    __repr__ = _swig_repr

    def __init__(self, cBackground):
        this = _tv.new_TDeskInit(cBackground)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TDeskInit
    __del__ = lambda self: None
TDeskInit_swigregister = _tv.TDeskInit_swigregister
TDeskInit_swigregister(TDeskInit)

class TDeskTop(TGroup, TDeskInit):
    __swig_setmethods__ = {}
    for _s in [TGroup, TDeskInit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDeskTop, name, value)
    __swig_getmethods__ = {}
    for _s in [TGroup, TDeskInit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDeskTop, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _tv.new_TDeskTop(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cascade(self, arg2):
        return _tv.TDeskTop_cascade(self, arg2)

    def handleEvent(self, arg2):
        return _tv.TDeskTop_handleEvent(self, arg2)
    if _newclass:
        initBackground = staticmethod(_tv.TDeskTop_initBackground)
    else:
        initBackground = _tv.TDeskTop_initBackground

    def tile(self, arg2):
        return _tv.TDeskTop_tile(self, arg2)

    def tileError(self):
        return _tv.TDeskTop_tileError(self)

    def shutDown(self):
        return _tv.TDeskTop_shutDown(self)

    def getBackground(self):
        return _tv.TDeskTop_getBackground(self)

    def getOptions(self):
        return _tv.TDeskTop_getOptions(self)

    def setOptions(self, aFlags):
        return _tv.TDeskTop_setOptions(self, aFlags)

    def canShowCursor(self):
        return _tv.TDeskTop_canShowCursor(self)

    def execView(self, p):
        return _tv.TDeskTop_execView(self, p)
    __swig_setmethods__["defaultBkgrnd"] = _tv.TDeskTop_defaultBkgrnd_set
    __swig_getmethods__["defaultBkgrnd"] = _tv.TDeskTop_defaultBkgrnd_get
    if _newclass:
        defaultBkgrnd = _swig_property(_tv.TDeskTop_defaultBkgrnd_get, _tv.TDeskTop_defaultBkgrnd_set)
    __swig_setmethods__["odefaultBkgrnd"] = _tv.TDeskTop_odefaultBkgrnd_set
    __swig_getmethods__["odefaultBkgrnd"] = _tv.TDeskTop_odefaultBkgrnd_get
    if _newclass:
        odefaultBkgrnd = _swig_property(_tv.TDeskTop_odefaultBkgrnd_get, _tv.TDeskTop_odefaultBkgrnd_set)
    __swig_destroy__ = _tv.delete_TDeskTop
    __del__ = lambda self: None
TDeskTop_swigregister = _tv.TDeskTop_swigregister
TDeskTop_swigregister(TDeskTop)

def TDeskTop_initBackground(arg2):
    return _tv.TDeskTop_initBackground(arg2)
TDeskTop_initBackground = _tv.TDeskTop_initBackground

cpColor = _tv.cpColor
cpBlackWhite = _tv.cpBlackWhite
cpMonochrome = _tv.cpMonochrome
class TProgInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TProgInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TProgInit, name)
    __repr__ = _swig_repr

    def __init__(self, cStatusLine, cMenuBar, cDeskTop):
        this = _tv.new_TProgInit(cStatusLine, cMenuBar, cDeskTop)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TProgInit
    __del__ = lambda self: None
    __swig_setmethods__["config"] = _tv.TProgInit_config_set
    __swig_getmethods__["config"] = _tv.TProgInit_config_get
    if _newclass:
        config = _swig_property(_tv.TProgInit_config_get, _tv.TProgInit_config_set)
TProgInit_swigregister = _tv.TProgInit_swigregister
TProgInit_swigregister(TProgInit)

class TProgram(TGroup, TProgInit):
    __swig_setmethods__ = {}
    for _s in [TGroup, TProgInit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [TGroup, TProgInit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TProgram, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TProgram:
            _self = None
        else:
            _self = self
        this = _tv.new_TProgram(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TProgram
    __del__ = lambda self: None

    def getEvent(self, event):
        return _tv.TProgram_getEvent(self, event)

    def getPalette(self):
        return _tv.TProgram_getPalette(self)

    def handleEvent(self, event):
        return _tv.TProgram_handleEvent(self, event)

    def idle(self):
        return _tv.TProgram_idle(self)

    def initScreen(self):
        return _tv.TProgram_initScreen(self)

    def outOfMemory(self):
        return _tv.TProgram_outOfMemory(self)

    def putEvent(self, event):
        return _tv.TProgram_putEvent(self, event)

    def run(self):
        return _tv.TProgram_run(self)

    def setScreenModeExt(self, w, h, fW=-1, fH=-1):
        return _tv.TProgram_setScreenModeExt(self, w, h, fW, fH)

    def setScreenMode(self, w, h, fW=-1, fH=-1):
        return _tv.TProgram_setScreenMode(self, w, h, fW, fH)

    def validView(self, p):
        return _tv.TProgram_validView(self, p)

    def shutDown(self):
        return _tv.TProgram_shutDown(self)

    def suspend(self):
        return _tv.TProgram_suspend(self)

    def resume(self):
        return _tv.TProgram_resume(self)

    def syncScreenBuffer(self):
        return _tv.TProgram_syncScreenBuffer(self)
    if _newclass:
        initStatusLine = staticmethod(_tv.TProgram_initStatusLine)
    else:
        initStatusLine = _tv.TProgram_initStatusLine
    if _newclass:
        initMenuBar = staticmethod(_tv.TProgram_initMenuBar)
    else:
        initMenuBar = _tv.TProgram_initMenuBar
    if _newclass:
        initDeskTop = staticmethod(_tv.TProgram_initDeskTop)
    else:
        initDeskTop = _tv.TProgram_initDeskTop
    __swig_setmethods__["application"] = _tv.TProgram_application_set
    __swig_getmethods__["application"] = _tv.TProgram_application_get
    if _newclass:
        application = _swig_property(_tv.TProgram_application_get, _tv.TProgram_application_set)
    __swig_setmethods__["statusLine"] = _tv.TProgram_statusLine_set
    __swig_getmethods__["statusLine"] = _tv.TProgram_statusLine_get
    if _newclass:
        statusLine = _swig_property(_tv.TProgram_statusLine_get, _tv.TProgram_statusLine_set)
    __swig_setmethods__["menuBar"] = _tv.TProgram_menuBar_set
    __swig_getmethods__["menuBar"] = _tv.TProgram_menuBar_get
    if _newclass:
        menuBar = _swig_property(_tv.TProgram_menuBar_get, _tv.TProgram_menuBar_set)
    __swig_setmethods__["deskTop"] = _tv.TProgram_deskTop_set
    __swig_getmethods__["deskTop"] = _tv.TProgram_deskTop_get
    if _newclass:
        deskTop = _swig_property(_tv.TProgram_deskTop_get, _tv.TProgram_deskTop_set)
    __swig_setmethods__["appPalette"] = _tv.TProgram_appPalette_set
    __swig_getmethods__["appPalette"] = _tv.TProgram_appPalette_get
    if _newclass:
        appPalette = _swig_property(_tv.TProgram_appPalette_get, _tv.TProgram_appPalette_set)
    __swig_setmethods__["lastIdleClock"] = _tv.TProgram_lastIdleClock_set
    __swig_getmethods__["lastIdleClock"] = _tv.TProgram_lastIdleClock_get
    if _newclass:
        lastIdleClock = _swig_property(_tv.TProgram_lastIdleClock_get, _tv.TProgram_lastIdleClock_set)
    __swig_setmethods__["inIdleTime"] = _tv.TProgram_inIdleTime_set
    __swig_getmethods__["inIdleTime"] = _tv.TProgram_inIdleTime_get
    if _newclass:
        inIdleTime = _swig_property(_tv.TProgram_inIdleTime_get, _tv.TProgram_inIdleTime_set)
    __swig_setmethods__["inIdle"] = _tv.TProgram_inIdle_set
    __swig_getmethods__["inIdle"] = _tv.TProgram_inIdle_get
    if _newclass:
        inIdle = _swig_property(_tv.TProgram_inIdle_get, _tv.TProgram_inIdle_set)
    if _newclass:
        resetIdleTime = staticmethod(_tv.TProgram_resetIdleTime)
    else:
        resetIdleTime = _tv.TProgram_resetIdleTime
    __swig_setmethods__["doNotReleaseCPU"] = _tv.TProgram_doNotReleaseCPU_set
    __swig_getmethods__["doNotReleaseCPU"] = _tv.TProgram_doNotReleaseCPU_get
    if _newclass:
        doNotReleaseCPU = _swig_property(_tv.TProgram_doNotReleaseCPU_get, _tv.TProgram_doNotReleaseCPU_set)
    def __disown__(self):
        self.this.disown()
        _tv.disown_TProgram(self)
        return weakref_proxy(self)
TProgram_swigregister = _tv.TProgram_swigregister
TProgram_swigregister(TProgram)
apColor = cvar.apColor
apBlackWhite = cvar.apBlackWhite
apMonochrome = cvar.apMonochrome

def TProgram_initStatusLine(arg2):
    return _tv.TProgram_initStatusLine(arg2)
TProgram_initStatusLine = _tv.TProgram_initStatusLine

def TProgram_initMenuBar(arg2):
    return _tv.TProgram_initMenuBar(arg2)
TProgram_initMenuBar = _tv.TProgram_initMenuBar

def TProgram_initDeskTop(arg2):
    return _tv.TProgram_initDeskTop(arg2)
TProgram_initDeskTop = _tv.TProgram_initDeskTop

def TProgram_resetIdleTime():
    return _tv.TProgram_resetIdleTime()
TProgram_resetIdleTime = _tv.TProgram_resetIdleTime

class TApplication(TProgram):
    __swig_setmethods__ = {}
    for _s in [TProgram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [TProgram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TApplication, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TApplication:
            _self = None
        else:
            _self = self
        this = _tv.new_TApplication(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TApplication
    __del__ = lambda self: None

    def suspend(self):
        return _tv.TApplication_suspend(self)

    def resume(self):
        return _tv.TApplication_resume(self)
    def __disown__(self):
        self.this.disown()
        _tv.disown_TApplication(self)
        return weakref_proxy(self)
TApplication_swigregister = _tv.TApplication_swigregister
TApplication_swigregister(TApplication)

cmValid = _tv.cmValid
cmQuit = _tv.cmQuit
cmError = _tv.cmError
cmMenu = _tv.cmMenu
cmClose = _tv.cmClose
cmZoom = _tv.cmZoom
cmResize = _tv.cmResize
cmNext = _tv.cmNext
cmPrev = _tv.cmPrev
cmHelp = _tv.cmHelp
cmOK = _tv.cmOK
cmCancel = _tv.cmCancel
cmYes = _tv.cmYes
cmNo = _tv.cmNo
cmDefault = _tv.cmDefault
sfVisible = _tv.sfVisible
sfCursorVis = _tv.sfCursorVis
sfCursorIns = _tv.sfCursorIns
sfShadow = _tv.sfShadow
sfActive = _tv.sfActive
sfSelected = _tv.sfSelected
sfFocused = _tv.sfFocused
sfDragging = _tv.sfDragging
sfDisabled = _tv.sfDisabled
sfModal = _tv.sfModal
sfDefault = _tv.sfDefault
sfExposed = _tv.sfExposed
ofSelectable = _tv.ofSelectable
ofTopSelect = _tv.ofTopSelect
ofFirstClick = _tv.ofFirstClick
ofFramed = _tv.ofFramed
ofPreProcess = _tv.ofPreProcess
ofPostProcess = _tv.ofPostProcess
ofBuffered = _tv.ofBuffered
ofTileable = _tv.ofTileable
ofCenterX = _tv.ofCenterX
ofCenterY = _tv.ofCenterY
ofCentered = _tv.ofCentered
ofBeVerbose = _tv.ofBeVerbose
gfGrowLoX = _tv.gfGrowLoX
gfGrowLoY = _tv.gfGrowLoY
gfGrowHiX = _tv.gfGrowHiX
gfGrowHiY = _tv.gfGrowHiY
gfGrowAll = _tv.gfGrowAll
gfGrowRel = _tv.gfGrowRel
dmDragMove = _tv.dmDragMove
dmDragGrow = _tv.dmDragGrow
dmLimitLoX = _tv.dmLimitLoX
dmLimitLoY = _tv.dmLimitLoY
dmLimitHiX = _tv.dmLimitHiX
dmLimitHiY = _tv.dmLimitHiY
dmLimitAll = _tv.dmLimitAll
hcNoContext = _tv.hcNoContext
hcDragging = _tv.hcDragging
sbLeftArrow = _tv.sbLeftArrow
sbRightArrow = _tv.sbRightArrow
sbPageLeft = _tv.sbPageLeft
sbPageRight = _tv.sbPageRight
sbUpArrow = _tv.sbUpArrow
sbDownArrow = _tv.sbDownArrow
sbPageUp = _tv.sbPageUp
sbPageDown = _tv.sbPageDown
sbIndicator = _tv.sbIndicator
sbHorizontal = _tv.sbHorizontal
sbVertical = _tv.sbVertical
sbHandleKeyboard = _tv.sbHandleKeyboard
wfMove = _tv.wfMove
wfGrow = _tv.wfGrow
wfClose = _tv.wfClose
wfZoom = _tv.wfZoom
noMenuBar = _tv.noMenuBar
noDeskTop = _tv.noDeskTop
noStatusLine = _tv.noStatusLine
noBackground = _tv.noBackground
noFrame = _tv.noFrame
noViewer = _tv.noViewer
noHistory = _tv.noHistory
wnNoNumber = _tv.wnNoNumber
wpBlueWindow = _tv.wpBlueWindow
wpCyanWindow = _tv.wpCyanWindow
wpGrayWindow = _tv.wpGrayWindow
cmCut = _tv.cmCut
cmCopy = _tv.cmCopy
cmPaste = _tv.cmPaste
cmUndo = _tv.cmUndo
cmClear = _tv.cmClear
cmTile = _tv.cmTile
cmCascade = _tv.cmCascade
cmReceivedFocus = _tv.cmReceivedFocus
cmReleasedFocus = _tv.cmReleasedFocus
cmCommandSetChanged = _tv.cmCommandSetChanged
cmScrollBarChanged = _tv.cmScrollBarChanged
cmScrollBarClicked = _tv.cmScrollBarClicked
cmSelectWindowNum = _tv.cmSelectWindowNum
cmListItemSelected = _tv.cmListItemSelected
cmClosingWindow = _tv.cmClosingWindow
cmClusterMovedTo = _tv.cmClusterMovedTo
cmClusterPress = _tv.cmClusterPress
cmRecordHistory = _tv.cmRecordHistory
cmListItemFocused = _tv.cmListItemFocused
cmGrabDefault = _tv.cmGrabDefault
cmReleaseDefault = _tv.cmReleaseDefault
cmUpdateCodePage = _tv.cmUpdateCodePage
cmCallShell = _tv.cmCallShell
positionalEvents = _tv.positionalEvents
focusedEvents = _tv.focusedEvents
kbSpace = _tv.kbSpace
kbCtrlA = _tv.kbCtrlA
kbCtrlB = _tv.kbCtrlB
kbCtrlC = _tv.kbCtrlC
kbCtrlD = _tv.kbCtrlD
kbCtrlE = _tv.kbCtrlE
kbCtrlF = _tv.kbCtrlF
kbCtrlG = _tv.kbCtrlG
kbCtrlH = _tv.kbCtrlH
kbCtrlI = _tv.kbCtrlI
kbCtrlJ = _tv.kbCtrlJ
kbCtrlK = _tv.kbCtrlK
kbCtrlL = _tv.kbCtrlL
kbCtrlM = _tv.kbCtrlM
kbCtrlN = _tv.kbCtrlN
kbCtrlO = _tv.kbCtrlO
kbCtrlP = _tv.kbCtrlP
kbCtrlQ = _tv.kbCtrlQ
kbCtrlR = _tv.kbCtrlR
kbCtrlS = _tv.kbCtrlS
kbCtrlT = _tv.kbCtrlT
kbCtrlU = _tv.kbCtrlU
kbCtrlV = _tv.kbCtrlV
kbCtrlW = _tv.kbCtrlW
kbCtrlX = _tv.kbCtrlX
kbCtrlY = _tv.kbCtrlY
kbCtrlZ = _tv.kbCtrlZ
kbEsc = _tv.kbEsc
kbAltSpace = _tv.kbAltSpace
kbCtrlIns = _tv.kbCtrlIns
kbShiftIns = _tv.kbShiftIns
kbCtrlDel = _tv.kbCtrlDel
kbShiftDel = _tv.kbShiftDel
kbCtrlShiftIns = _tv.kbCtrlShiftIns
kbCtrlShiftDel = _tv.kbCtrlShiftDel
kbBack = _tv.kbBack
kbCtrlBack = _tv.kbCtrlBack
kbShiftTab = _tv.kbShiftTab
kbTab = _tv.kbTab
kbAltA = _tv.kbAltA
kbAltB = _tv.kbAltB
kbAltC = _tv.kbAltC
kbAltD = _tv.kbAltD
kbAltE = _tv.kbAltE
kbAltF = _tv.kbAltF
kbAltG = _tv.kbAltG
kbAltH = _tv.kbAltH
kbAltI = _tv.kbAltI
kbAltJ = _tv.kbAltJ
kbAltK = _tv.kbAltK
kbAltL = _tv.kbAltL
kbAltM = _tv.kbAltM
kbAltN = _tv.kbAltN
kbAltO = _tv.kbAltO
kbAltP = _tv.kbAltP
kbAltQ = _tv.kbAltQ
kbAltR = _tv.kbAltR
kbAltS = _tv.kbAltS
kbAltT = _tv.kbAltT
kbAltU = _tv.kbAltU
kbAltV = _tv.kbAltV
kbAltW = _tv.kbAltW
kbAltX = _tv.kbAltX
kbAltY = _tv.kbAltY
kbAltZ = _tv.kbAltZ
kbCtrlEnter = _tv.kbCtrlEnter
kbEnter = _tv.kbEnter
kbF1 = _tv.kbF1
kbF2 = _tv.kbF2
kbF3 = _tv.kbF3
kbF4 = _tv.kbF4
kbF5 = _tv.kbF5
kbF6 = _tv.kbF6
kbF7 = _tv.kbF7
kbF8 = _tv.kbF8
kbF9 = _tv.kbF9
kbF10 = _tv.kbF10
kbF11 = _tv.kbF11
kbF12 = _tv.kbF12
kbHome = _tv.kbHome
kbUp = _tv.kbUp
kbPgUp = _tv.kbPgUp
kbLeft = _tv.kbLeft
kbRight = _tv.kbRight
kbEnd = _tv.kbEnd
kbDown = _tv.kbDown
kbPgDn = _tv.kbPgDn
kbIns = _tv.kbIns
kbDel = _tv.kbDel
kbGrayMinus = _tv.kbGrayMinus
kbGrayPlus = _tv.kbGrayPlus
kbShiftF1 = _tv.kbShiftF1
kbShiftF2 = _tv.kbShiftF2
kbShiftF3 = _tv.kbShiftF3
kbShiftF4 = _tv.kbShiftF4
kbShiftF5 = _tv.kbShiftF5
kbShiftF6 = _tv.kbShiftF6
kbShiftF7 = _tv.kbShiftF7
kbShiftF8 = _tv.kbShiftF8
kbShiftF9 = _tv.kbShiftF9
kbShiftF10 = _tv.kbShiftF10
kbShiftF11 = _tv.kbShiftF11
kbShiftF12 = _tv.kbShiftF12
kbCtrlF1 = _tv.kbCtrlF1
kbCtrlF2 = _tv.kbCtrlF2
kbCtrlF3 = _tv.kbCtrlF3
kbCtrlF4 = _tv.kbCtrlF4
kbCtrlF5 = _tv.kbCtrlF5
kbCtrlF6 = _tv.kbCtrlF6
kbCtrlF7 = _tv.kbCtrlF7
kbCtrlF8 = _tv.kbCtrlF8
kbCtrlF9 = _tv.kbCtrlF9
kbCtrlF10 = _tv.kbCtrlF10
kbCtrlF11 = _tv.kbCtrlF11
kbCtrlF12 = _tv.kbCtrlF12
kbAltF1 = _tv.kbAltF1
kbAltF2 = _tv.kbAltF2
kbAltF3 = _tv.kbAltF3
kbAltF4 = _tv.kbAltF4
kbAltF5 = _tv.kbAltF5
kbAltF6 = _tv.kbAltF6
kbAltF7 = _tv.kbAltF7
kbAltF8 = _tv.kbAltF8
kbAltF9 = _tv.kbAltF9
kbAltF10 = _tv.kbAltF10
kbAltF11 = _tv.kbAltF11
kbAltF12 = _tv.kbAltF12
kbCtrlPrtSc = _tv.kbCtrlPrtSc
kbCtrlLeft = _tv.kbCtrlLeft
kbCtrlRight = _tv.kbCtrlRight
kbCtrlEnd = _tv.kbCtrlEnd
kbCtrlPgDn = _tv.kbCtrlPgDn
kbCtrlHome = _tv.kbCtrlHome
kbAlt1 = _tv.kbAlt1
kbAlt2 = _tv.kbAlt2
kbAlt3 = _tv.kbAlt3
kbAlt4 = _tv.kbAlt4
kbAlt5 = _tv.kbAlt5
kbAlt6 = _tv.kbAlt6
kbAlt7 = _tv.kbAlt7
kbAlt8 = _tv.kbAlt8
kbAlt9 = _tv.kbAlt9
kbAlt0 = _tv.kbAlt0
kbAltMinus = _tv.kbAltMinus
kbAltEqual = _tv.kbAltEqual
kbCtrlPgUp = _tv.kbCtrlPgUp
kbNoKey = _tv.kbNoKey
kbAltBack = _tv.kbAltBack
kbRightShift = _tv.kbRightShift
kbLeftShift = _tv.kbLeftShift
kbShift = _tv.kbShift
kbLeftCtrl = _tv.kbLeftCtrl
kbRightCtrl = _tv.kbRightCtrl
kbCtrlShift = _tv.kbCtrlShift
kbLeftAlt = _tv.kbLeftAlt
kbRightAlt = _tv.kbRightAlt
kbAltShift = _tv.kbAltShift
kbScrollState = _tv.kbScrollState
kbNumState = _tv.kbNumState
kbCapsState = _tv.kbCapsState
kbInsState = _tv.kbInsState
class TDialog(TWindow):
    __swig_setmethods__ = {}
    for _s in [TWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDialog, name, value)
    __swig_getmethods__ = {}
    for _s in [TWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDialog, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aTitle):
        this = _tv.new_TDialog(bounds, aTitle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPalette(self):
        return _tv.TDialog_getPalette(self)

    def handleEvent(self, event):
        return _tv.TDialog_handleEvent(self, event)

    def valid(self, command):
        return _tv.TDialog_valid(self, command)
    __swig_destroy__ = _tv.delete_TDialog
    __del__ = lambda self: None
TDialog_swigregister = _tv.TDialog_swigregister
TDialog_swigregister(TDialog)

fdOKButton = _tv.fdOKButton
fdOpenButton = _tv.fdOpenButton
fdReplaceButton = _tv.fdReplaceButton
fdClearButton = _tv.fdClearButton
fdHelpButton = _tv.fdHelpButton
fdSelectButton = _tv.fdSelectButton
fdDoneButton = _tv.fdDoneButton
fdAddButton = _tv.fdAddButton
fdNoLoadDir = _tv.fdNoLoadDir
class TFileDialog(TDialog):
    __swig_setmethods__ = {}
    for _s in [TDialog]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TFileDialog, name, value)
    __swig_getmethods__ = {}
    for _s in [TDialog]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TFileDialog, name)
    __repr__ = _swig_repr

    def __init__(self, aWildCard, aTitle, inputName, aOptions, histId):
        this = _tv.new_TFileDialog(aWildCard, aTitle, inputName, aOptions, histId)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TFileDialog
    __del__ = lambda self: None

    def getData(self, rec):
        return _tv.TFileDialog_getData(self, rec)

    def getFileName(self, s):
        return _tv.TFileDialog_getFileName(self, s)

    def handleEvent(self, event):
        return _tv.TFileDialog_handleEvent(self, event)

    def setData(self, rec):
        return _tv.TFileDialog_setData(self, rec)

    def valid(self, command):
        return _tv.TFileDialog_valid(self, command)

    def shutDown(self):
        return _tv.TFileDialog_shutDown(self)

    def sizeLimits(self, min, max):
        return _tv.TFileDialog_sizeLimits(self, min, max)
    __swig_setmethods__["fileName"] = _tv.TFileDialog_fileName_set
    __swig_getmethods__["fileName"] = _tv.TFileDialog_fileName_get
    if _newclass:
        fileName = _swig_property(_tv.TFileDialog_fileName_get, _tv.TFileDialog_fileName_set)
    __swig_setmethods__["fileList"] = _tv.TFileDialog_fileList_set
    __swig_getmethods__["fileList"] = _tv.TFileDialog_fileList_get
    if _newclass:
        fileList = _swig_property(_tv.TFileDialog_fileList_get, _tv.TFileDialog_fileList_set)
    __swig_setmethods__["wildCard"] = _tv.TFileDialog_wildCard_set
    __swig_getmethods__["wildCard"] = _tv.TFileDialog_wildCard_get
    if _newclass:
        wildCard = _swig_property(_tv.TFileDialog_wildCard_get, _tv.TFileDialog_wildCard_set)
    __swig_setmethods__["directory"] = _tv.TFileDialog_directory_set
    __swig_getmethods__["directory"] = _tv.TFileDialog_directory_get
    if _newclass:
        directory = _swig_property(_tv.TFileDialog_directory_get, _tv.TFileDialog_directory_set)
TFileDialog_swigregister = _tv.TFileDialog_swigregister
TFileDialog_swigregister(TFileDialog)

class TEditorApp(TApplication):
    __swig_setmethods__ = {}
    for _s in [TApplication]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TEditorApp, name, value)
    __swig_getmethods__ = {}
    for _s in [TApplication]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TEditorApp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tv.new_TEditorApp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def handleEvent(self, event):
        return _tv.TEditorApp_handleEvent(self, event)
    if _newclass:
        initMenuBar = staticmethod(_tv.TEditorApp_initMenuBar)
    else:
        initMenuBar = _tv.TEditorApp_initMenuBar
    if _newclass:
        initStatusLine = staticmethod(_tv.TEditorApp_initStatusLine)
    else:
        initStatusLine = _tv.TEditorApp_initStatusLine

    def outOfMemory(self):
        return _tv.TEditorApp_outOfMemory(self)

    def openEditor(self, fileName, visible):
        return _tv.TEditorApp_openEditor(self, fileName, visible)
    __swig_destroy__ = _tv.delete_TEditorApp
    __del__ = lambda self: None
TEditorApp_swigregister = _tv.TEditorApp_swigregister
TEditorApp_swigregister(TEditorApp)

def TEditorApp_initMenuBar(arg2):
    return _tv.TEditorApp_initMenuBar(arg2)
TEditorApp_initMenuBar = _tv.TEditorApp_initMenuBar

def TEditorApp_initStatusLine(arg2):
    return _tv.TEditorApp_initStatusLine(arg2)
TEditorApp_initStatusLine = _tv.TEditorApp_initStatusLine


def execDialog(d, data):
    return _tv.execDialog(d, data)
execDialog = _tv.execDialog

def createFindDialog():
    return _tv.createFindDialog()
createFindDialog = _tv.createFindDialog

def createReplaceDialog():
    return _tv.createReplaceDialog()
createReplaceDialog = _tv.createReplaceDialog
bfNormal = _tv.bfNormal
bfDefault = _tv.bfDefault
bfLeftJust = _tv.bfLeftJust
bfBroadcast = _tv.bfBroadcast

def messageBox(msg, aOptions):
    return _tv.messageBox(msg, aOptions)
messageBox = _tv.messageBox

def messageBoxRect(r, msg, aOptions):
    return _tv.messageBoxRect(r, msg, aOptions)
messageBoxRect = _tv.messageBoxRect

def inputBox(Title, aLabel, s, limit):
    return _tv.inputBox(Title, aLabel, s, limit)
inputBox = _tv.inputBox

def inputBoxRect(bounds, title, aLabel, s, limit):
    return _tv.inputBoxRect(bounds, title, aLabel, s, limit)
inputBoxRect = _tv.inputBoxRect
mfWarning = _tv.mfWarning
mfError = _tv.mfError
mfInformation = _tv.mfInformation
mfConfirmation = _tv.mfConfirmation
mfYesButton = _tv.mfYesButton
mfNoButton = _tv.mfNoButton
mfOKButton = _tv.mfOKButton
mfCancelButton = _tv.mfCancelButton
mfDontTranslate = _tv.mfDontTranslate
mfDontShowAgain = _tv.mfDontShowAgain
mfYesNoCancel = _tv.mfYesNoCancel
mfOKCancel = _tv.mfOKCancel
class MsgBoxText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgBoxText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsgBoxText, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tv.new_MsgBoxText()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_MsgBoxText
    __del__ = lambda self: None
MsgBoxText_swigregister = _tv.MsgBoxText_swigregister
MsgBoxText_swigregister(MsgBoxText)

class TListViewer(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TListViewer, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TListViewer, name)
    __repr__ = _swig_repr

    def __init__(self, bounds, aNumCols, aHScrollBar, aVScrollBar):
        this = _tv.new_TListViewer(bounds, aNumCols, aHScrollBar, aVScrollBar)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def changeBounds(self, bounds):
        return _tv.TListViewer_changeBounds(self, bounds)

    def draw(self):
        return _tv.TListViewer_draw(self)

    def focusItem(self, item):
        return _tv.TListViewer_focusItem(self, item)

    def getPalette(self):
        return _tv.TListViewer_getPalette(self)

    def getText(self, dest, item, maxLen):
        return _tv.TListViewer_getText(self, dest, item, maxLen)

    def isSelected(self, item):
        return _tv.TListViewer_isSelected(self, item)

    def handleEvent(self, event):
        return _tv.TListViewer_handleEvent(self, event)

    def selectItem(self, item):
        return _tv.TListViewer_selectItem(self, item)

    def setRange(self, aRange):
        return _tv.TListViewer_setRange(self, aRange)

    def setState(self, aState, enable):
        return _tv.TListViewer_setState(self, aState, enable)

    def focusItemNum(self, item):
        return _tv.TListViewer_focusItemNum(self, item)

    def shutDown(self):
        return _tv.TListViewer_shutDown(self)
    __swig_setmethods__["hScrollBar"] = _tv.TListViewer_hScrollBar_set
    __swig_getmethods__["hScrollBar"] = _tv.TListViewer_hScrollBar_get
    if _newclass:
        hScrollBar = _swig_property(_tv.TListViewer_hScrollBar_get, _tv.TListViewer_hScrollBar_set)
    __swig_setmethods__["vScrollBar"] = _tv.TListViewer_vScrollBar_set
    __swig_getmethods__["vScrollBar"] = _tv.TListViewer_vScrollBar_get
    if _newclass:
        vScrollBar = _swig_property(_tv.TListViewer_vScrollBar_get, _tv.TListViewer_vScrollBar_set)
    __swig_setmethods__["numCols"] = _tv.TListViewer_numCols_set
    __swig_getmethods__["numCols"] = _tv.TListViewer_numCols_get
    if _newclass:
        numCols = _swig_property(_tv.TListViewer_numCols_get, _tv.TListViewer_numCols_set)
    __swig_setmethods__["topItem"] = _tv.TListViewer_topItem_set
    __swig_getmethods__["topItem"] = _tv.TListViewer_topItem_get
    if _newclass:
        topItem = _swig_property(_tv.TListViewer_topItem_get, _tv.TListViewer_topItem_set)
    __swig_setmethods__["focused"] = _tv.TListViewer_focused_set
    __swig_getmethods__["focused"] = _tv.TListViewer_focused_get
    if _newclass:
        focused = _swig_property(_tv.TListViewer_focused_get, _tv.TListViewer_focused_set)
    __swig_setmethods__["range"] = _tv.TListViewer_range_set
    __swig_getmethods__["range"] = _tv.TListViewer_range_get
    if _newclass:
        range = _swig_property(_tv.TListViewer_range_get, _tv.TListViewer_range_set)
    __swig_setmethods__["handleSpace"] = _tv.TListViewer_handleSpace_set
    __swig_getmethods__["handleSpace"] = _tv.TListViewer_handleSpace_get
    if _newclass:
        handleSpace = _swig_property(_tv.TListViewer_handleSpace_get, _tv.TListViewer_handleSpace_set)
    __swig_setmethods__["columnSeparator"] = _tv.TListViewer_columnSeparator_set
    __swig_getmethods__["columnSeparator"] = _tv.TListViewer_columnSeparator_get
    if _newclass:
        columnSeparator = _swig_property(_tv.TListViewer_columnSeparator_get, _tv.TListViewer_columnSeparator_set)
    __swig_setmethods__["ocolumnSeparator"] = _tv.TListViewer_ocolumnSeparator_set
    __swig_getmethods__["ocolumnSeparator"] = _tv.TListViewer_ocolumnSeparator_get
    if _newclass:
        ocolumnSeparator = _swig_property(_tv.TListViewer_ocolumnSeparator_get, _tv.TListViewer_ocolumnSeparator_set)

    def getExtraOptions(self):
        return _tv.TListViewer_getExtraOptions(self)

    def setExtraOptions(self, ops):
        return _tv.TListViewer_setExtraOptions(self, ops)
    __swig_destroy__ = _tv.delete_TListViewer
    __del__ = lambda self: None
TListViewer_swigregister = _tv.TListViewer_swigregister
TListViewer_swigregister(TListViewer)

class TListBoxRec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TListBoxRec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TListBoxRec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["items"] = _tv.TListBoxRec_items_set
    __swig_getmethods__["items"] = _tv.TListBoxRec_items_get
    if _newclass:
        items = _swig_property(_tv.TListBoxRec_items_get, _tv.TListBoxRec_items_set)
    __swig_setmethods__["selection"] = _tv.TListBoxRec_selection_set
    __swig_getmethods__["selection"] = _tv.TListBoxRec_selection_get
    if _newclass:
        selection = _swig_property(_tv.TListBoxRec_selection_get, _tv.TListBoxRec_selection_set)

    def __init__(self):
        this = _tv.new_TListBoxRec()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TListBoxRec
    __del__ = lambda self: None
TListBoxRec_swigregister = _tv.TListBoxRec_swigregister
TListBoxRec_swigregister(TListBoxRec)

class TListBox(TListViewer):
    __swig_setmethods__ = {}
    for _s in [TListViewer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TListBox, name, value)
    __swig_getmethods__ = {}
    for _s in [TListViewer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TListBox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tv.new_TListBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TListBox
    __del__ = lambda self: None

    def dataSize(self):
        return _tv.TListBox_dataSize(self)

    def getData(self, rec):
        return _tv.TListBox_getData(self, rec)

    def getText(self, dest, item, maxLen):
        return _tv.TListBox_getText(self, dest, item, maxLen)

    def newList(self, aList):
        return _tv.TListBox_newList(self, aList)

    def newList(self, p):
        p.thisown = 0
        return _tv.TListBox_newList(self, p)


    def setData(self, rec):
        return _tv.TListBox_setData(self, rec)

    def list(self):
        return _tv.TListBox_list(self)
TListBox_swigregister = _tv.TListBox_swigregister
TListBox_swigregister(TListBox)

ufUpdate = _tv.ufUpdate
ufLine = _tv.ufLine
ufView = _tv.ufView
smExtend = _tv.smExtend
smDouble = _tv.smDouble
sfSearchFailed = _tv.sfSearchFailed
cmSave = _tv.cmSave
cmSaveAs = _tv.cmSaveAs
cmFind = _tv.cmFind
cmReplace = _tv.cmReplace
cmSearchAgain = _tv.cmSearchAgain
cmCharLeft = _tv.cmCharLeft
cmCharRight = _tv.cmCharRight
cmWordLeft = _tv.cmWordLeft
cmWordRight = _tv.cmWordRight
cmLineStart = _tv.cmLineStart
cmLineEnd = _tv.cmLineEnd
cmLineUp = _tv.cmLineUp
cmLineDown = _tv.cmLineDown
cmPageUp = _tv.cmPageUp
cmPageDown = _tv.cmPageDown
cmTextStart = _tv.cmTextStart
cmTextEnd = _tv.cmTextEnd
cmNewLine = _tv.cmNewLine
cmBackSpace = _tv.cmBackSpace
cmDelChar = _tv.cmDelChar
cmDelWord = _tv.cmDelWord
cmDelStart = _tv.cmDelStart
cmDelEnd = _tv.cmDelEnd
cmDelLine = _tv.cmDelLine
cmInsMode = _tv.cmInsMode
cmStartSelect = _tv.cmStartSelect
cmHideSelect = _tv.cmHideSelect
cmIndentMode = _tv.cmIndentMode
cmUpdateTitle = _tv.cmUpdateTitle
cmInsertText = _tv.cmInsertText
edOutOfMemory = _tv.edOutOfMemory
edReadError = _tv.edReadError
edWriteError = _tv.edWriteError
edCreateError = _tv.edCreateError
edSaveModify = _tv.edSaveModify
edSaveUntitled = _tv.edSaveUntitled
edSaveAs = _tv.edSaveAs
edFind = _tv.edFind
edSearchFailed = _tv.edSearchFailed
edReplace = _tv.edReplace
edReplacePrompt = _tv.edReplacePrompt
efCaseSensitive = _tv.efCaseSensitive
efWholeWordsOnly = _tv.efWholeWordsOnly
efPromptOnReplace = _tv.efPromptOnReplace
efReplaceAll = _tv.efReplaceAll
efDoReplace = _tv.efDoReplace
efBackupFiles = _tv.efBackupFiles
cmOpen = _tv.cmOpen
cmNew = _tv.cmNew
cmChangeDrct = _tv.cmChangeDrct
cmDosShell = _tv.cmDosShell
cmCalculator = _tv.cmCalculator
cmShowClip = _tv.cmShowClip
cmMacros = _tv.cmMacros

def defEditorDialog(dialog):
    return _tv.defEditorDialog(dialog)
defEditorDialog = _tv.defEditorDialog
class TIndicator(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _tv.new_TIndicator(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def draw(self):
        return _tv.TIndicator_draw(self)

    def getPalette(self):
        return _tv.TIndicator_getPalette(self)

    def setState(self, arg2, arg3):
        return _tv.TIndicator_setState(self, arg2, arg3)

    def setValue(self, arg2, arg3):
        return _tv.TIndicator_setValue(self, arg2, arg3)
    __swig_destroy__ = _tv.delete_TIndicator
    __del__ = lambda self: None
TIndicator_swigregister = _tv.TIndicator_swigregister
TIndicator_swigregister(TIndicator)
maxLineLength = cvar.maxLineLength

class TEditor(TView):
    __swig_setmethods__ = {}
    for _s in [TView]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TEditor, name, value)
    __swig_getmethods__ = {}
    for _s in [TView]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TEditor, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6):
        this = _tv.new_TEditor(arg2, arg3, arg4, arg5, arg6)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TEditor
    __del__ = lambda self: None

    def shutDown(self):
        return _tv.TEditor_shutDown(self)

    def bufChar(self, arg2):
        return _tv.TEditor_bufChar(self, arg2)

    def bufPtr(self, arg2):
        return _tv.TEditor_bufPtr(self, arg2)

    def changeBounds(self, arg2):
        return _tv.TEditor_changeBounds(self, arg2)

    def convertEvent(self, arg2):
        return _tv.TEditor_convertEvent(self, arg2)

    def cursorVisible(self):
        return _tv.TEditor_cursorVisible(self)

    def deleteSelect(self):
        return _tv.TEditor_deleteSelect(self)

    def doneBuffer(self):
        return _tv.TEditor_doneBuffer(self)

    def draw(self):
        return _tv.TEditor_draw(self)

    def getPalette(self):
        return _tv.TEditor_getPalette(self)

    def handleEvent(self, arg2):
        return _tv.TEditor_handleEvent(self, arg2)

    def initBuffer(self):
        return _tv.TEditor_initBuffer(self)

    def insertBuffer(self, arg2, arg3, arg4, arg5, arg6):
        return _tv.TEditor_insertBuffer(self, arg2, arg3, arg4, arg5, arg6)

    def insertFrom(self, arg2):
        return _tv.TEditor_insertFrom(self, arg2)

    def insertText(self, arg2, arg3, arg4):
        return _tv.TEditor_insertText(self, arg2, arg3, arg4)

    def scrollTo(self, arg2, arg3):
        return _tv.TEditor_scrollTo(self, arg2, arg3)

    def search(self, arg2, arg3):
        return _tv.TEditor_search(self, arg2, arg3)

    def setBufSize(self, arg2):
        return _tv.TEditor_setBufSize(self, arg2)

    def setCmdState(self, arg2, arg3):
        return _tv.TEditor_setCmdState(self, arg2, arg3)

    def setSelect(self, arg2, arg3, arg4):
        return _tv.TEditor_setSelect(self, arg2, arg3, arg4)

    def setState(self, arg2, arg3):
        return _tv.TEditor_setState(self, arg2, arg3)

    def trackCursor(self, arg2):
        return _tv.TEditor_trackCursor(self, arg2)

    def undo(self):
        return _tv.TEditor_undo(self)

    def updateCommands(self):
        return _tv.TEditor_updateCommands(self)

    def valid(self, arg2):
        return _tv.TEditor_valid(self, arg2)

    def charPos(self, arg2, arg3):
        return _tv.TEditor_charPos(self, arg2, arg3)

    def charPtr(self, arg2, arg3):
        return _tv.TEditor_charPtr(self, arg2, arg3)

    def clipCopy(self):
        return _tv.TEditor_clipCopy(self)

    def clipCut(self):
        return _tv.TEditor_clipCut(self)

    def clipPaste(self):
        return _tv.TEditor_clipPaste(self)

    def deleteRange(self, arg2, arg3, arg4):
        return _tv.TEditor_deleteRange(self, arg2, arg3, arg4)

    def doUpdate(self):
        return _tv.TEditor_doUpdate(self)

    def doSearchReplace(self):
        return _tv.TEditor_doSearchReplace(self)

    def drawLines(self, arg2, arg3, arg4):
        return _tv.TEditor_drawLines(self, arg2, arg3, arg4)

    def formatLine(self, arg2, arg3, arg4, arg5):
        return _tv.TEditor_formatLine(self, arg2, arg3, arg4, arg5)

    def find(self):
        return _tv.TEditor_find(self)

    def getMousePtr(self, arg2):
        return _tv.TEditor_getMousePtr(self, arg2)

    def hasSelection(self):
        return _tv.TEditor_hasSelection(self)

    def hideSelect(self):
        return _tv.TEditor_hideSelect(self)

    def isClipboard(self):
        return _tv.TEditor_isClipboard(self)

    def lineEnd(self, arg2):
        return _tv.TEditor_lineEnd(self, arg2)

    def lineMove(self, arg2, arg3):
        return _tv.TEditor_lineMove(self, arg2, arg3)

    def lineStart(self, arg2):
        return _tv.TEditor_lineStart(self, arg2)

    def lock(self):
        return _tv.TEditor_lock(self)

    def newLine(self):
        return _tv.TEditor_newLine(self)

    def nextChar(self, arg2):
        return _tv.TEditor_nextChar(self, arg2)

    def nextLine(self, arg2):
        return _tv.TEditor_nextLine(self, arg2)

    def nextWord(self, arg2):
        return _tv.TEditor_nextWord(self, arg2)

    def prevChar(self, arg2):
        return _tv.TEditor_prevChar(self, arg2)

    def prevLine(self, arg2):
        return _tv.TEditor_prevLine(self, arg2)

    def prevWord(self, arg2):
        return _tv.TEditor_prevWord(self, arg2)

    def replace(self):
        return _tv.TEditor_replace(self)

    def setBufLen(self, arg2):
        return _tv.TEditor_setBufLen(self, arg2)

    def setCurPtr(self, arg2, arg3):
        return _tv.TEditor_setCurPtr(self, arg2, arg3)

    def startSelect(self):
        return _tv.TEditor_startSelect(self)

    def toggleInsMode(self):
        return _tv.TEditor_toggleInsMode(self)

    def unlock(self):
        return _tv.TEditor_unlock(self)

    def update(self, arg2):
        return _tv.TEditor_update(self, arg2)

    def checkScrollBar(self, arg2, arg3, arg4):
        return _tv.TEditor_checkScrollBar(self, arg2, arg3, arg4)
    __swig_setmethods__["hScrollBar"] = _tv.TEditor_hScrollBar_set
    __swig_getmethods__["hScrollBar"] = _tv.TEditor_hScrollBar_get
    if _newclass:
        hScrollBar = _swig_property(_tv.TEditor_hScrollBar_get, _tv.TEditor_hScrollBar_set)
    __swig_setmethods__["vScrollBar"] = _tv.TEditor_vScrollBar_set
    __swig_getmethods__["vScrollBar"] = _tv.TEditor_vScrollBar_get
    if _newclass:
        vScrollBar = _swig_property(_tv.TEditor_vScrollBar_get, _tv.TEditor_vScrollBar_set)
    __swig_setmethods__["indicator"] = _tv.TEditor_indicator_set
    __swig_getmethods__["indicator"] = _tv.TEditor_indicator_get
    if _newclass:
        indicator = _swig_property(_tv.TEditor_indicator_get, _tv.TEditor_indicator_set)
    __swig_setmethods__["buffer"] = _tv.TEditor_buffer_set
    __swig_getmethods__["buffer"] = _tv.TEditor_buffer_get
    if _newclass:
        buffer = _swig_property(_tv.TEditor_buffer_get, _tv.TEditor_buffer_set)
    __swig_setmethods__["bufSize"] = _tv.TEditor_bufSize_set
    __swig_getmethods__["bufSize"] = _tv.TEditor_bufSize_get
    if _newclass:
        bufSize = _swig_property(_tv.TEditor_bufSize_get, _tv.TEditor_bufSize_set)
    __swig_setmethods__["bufLen"] = _tv.TEditor_bufLen_set
    __swig_getmethods__["bufLen"] = _tv.TEditor_bufLen_get
    if _newclass:
        bufLen = _swig_property(_tv.TEditor_bufLen_get, _tv.TEditor_bufLen_set)
    __swig_setmethods__["gapLen"] = _tv.TEditor_gapLen_set
    __swig_getmethods__["gapLen"] = _tv.TEditor_gapLen_get
    if _newclass:
        gapLen = _swig_property(_tv.TEditor_gapLen_get, _tv.TEditor_gapLen_set)
    __swig_setmethods__["selStart"] = _tv.TEditor_selStart_set
    __swig_getmethods__["selStart"] = _tv.TEditor_selStart_get
    if _newclass:
        selStart = _swig_property(_tv.TEditor_selStart_get, _tv.TEditor_selStart_set)
    __swig_setmethods__["selEnd"] = _tv.TEditor_selEnd_set
    __swig_getmethods__["selEnd"] = _tv.TEditor_selEnd_get
    if _newclass:
        selEnd = _swig_property(_tv.TEditor_selEnd_get, _tv.TEditor_selEnd_set)
    __swig_setmethods__["curPtr"] = _tv.TEditor_curPtr_set
    __swig_getmethods__["curPtr"] = _tv.TEditor_curPtr_get
    if _newclass:
        curPtr = _swig_property(_tv.TEditor_curPtr_get, _tv.TEditor_curPtr_set)
    __swig_setmethods__["curPos"] = _tv.TEditor_curPos_set
    __swig_getmethods__["curPos"] = _tv.TEditor_curPos_get
    if _newclass:
        curPos = _swig_property(_tv.TEditor_curPos_get, _tv.TEditor_curPos_set)
    __swig_setmethods__["delta"] = _tv.TEditor_delta_set
    __swig_getmethods__["delta"] = _tv.TEditor_delta_get
    if _newclass:
        delta = _swig_property(_tv.TEditor_delta_get, _tv.TEditor_delta_set)
    __swig_setmethods__["limit"] = _tv.TEditor_limit_set
    __swig_getmethods__["limit"] = _tv.TEditor_limit_get
    if _newclass:
        limit = _swig_property(_tv.TEditor_limit_get, _tv.TEditor_limit_set)
    __swig_setmethods__["drawLine"] = _tv.TEditor_drawLine_set
    __swig_getmethods__["drawLine"] = _tv.TEditor_drawLine_get
    if _newclass:
        drawLine = _swig_property(_tv.TEditor_drawLine_get, _tv.TEditor_drawLine_set)
    __swig_setmethods__["drawPtr"] = _tv.TEditor_drawPtr_set
    __swig_getmethods__["drawPtr"] = _tv.TEditor_drawPtr_get
    if _newclass:
        drawPtr = _swig_property(_tv.TEditor_drawPtr_get, _tv.TEditor_drawPtr_set)
    __swig_setmethods__["delCount"] = _tv.TEditor_delCount_set
    __swig_getmethods__["delCount"] = _tv.TEditor_delCount_get
    if _newclass:
        delCount = _swig_property(_tv.TEditor_delCount_get, _tv.TEditor_delCount_set)
    __swig_setmethods__["insCount"] = _tv.TEditor_insCount_set
    __swig_getmethods__["insCount"] = _tv.TEditor_insCount_get
    if _newclass:
        insCount = _swig_property(_tv.TEditor_insCount_get, _tv.TEditor_insCount_set)
    __swig_setmethods__["isValid"] = _tv.TEditor_isValid_set
    __swig_getmethods__["isValid"] = _tv.TEditor_isValid_get
    if _newclass:
        isValid = _swig_property(_tv.TEditor_isValid_get, _tv.TEditor_isValid_set)
    __swig_setmethods__["canUndo"] = _tv.TEditor_canUndo_set
    __swig_getmethods__["canUndo"] = _tv.TEditor_canUndo_get
    if _newclass:
        canUndo = _swig_property(_tv.TEditor_canUndo_get, _tv.TEditor_canUndo_set)
    __swig_setmethods__["modified"] = _tv.TEditor_modified_set
    __swig_getmethods__["modified"] = _tv.TEditor_modified_get
    if _newclass:
        modified = _swig_property(_tv.TEditor_modified_get, _tv.TEditor_modified_set)
    __swig_setmethods__["selecting"] = _tv.TEditor_selecting_set
    __swig_getmethods__["selecting"] = _tv.TEditor_selecting_get
    if _newclass:
        selecting = _swig_property(_tv.TEditor_selecting_get, _tv.TEditor_selecting_set)
    __swig_setmethods__["overwrite"] = _tv.TEditor_overwrite_set
    __swig_getmethods__["overwrite"] = _tv.TEditor_overwrite_get
    if _newclass:
        overwrite = _swig_property(_tv.TEditor_overwrite_get, _tv.TEditor_overwrite_set)
    __swig_setmethods__["autoIndent"] = _tv.TEditor_autoIndent_set
    __swig_getmethods__["autoIndent"] = _tv.TEditor_autoIndent_get
    if _newclass:
        autoIndent = _swig_property(_tv.TEditor_autoIndent_get, _tv.TEditor_autoIndent_set)
    __swig_setmethods__["editorDialog"] = _tv.TEditor_editorDialog_set
    __swig_getmethods__["editorDialog"] = _tv.TEditor_editorDialog_get
    if _newclass:
        editorDialog = _swig_property(_tv.TEditor_editorDialog_get, _tv.TEditor_editorDialog_set)
    __swig_setmethods__["editorFlags"] = _tv.TEditor_editorFlags_set
    __swig_getmethods__["editorFlags"] = _tv.TEditor_editorFlags_get
    if _newclass:
        editorFlags = _swig_property(_tv.TEditor_editorFlags_get, _tv.TEditor_editorFlags_set)
    __swig_setmethods__["findStr"] = _tv.TEditor_findStr_set
    __swig_getmethods__["findStr"] = _tv.TEditor_findStr_get
    if _newclass:
        findStr = _swig_property(_tv.TEditor_findStr_get, _tv.TEditor_findStr_set)
    __swig_setmethods__["replaceStr"] = _tv.TEditor_replaceStr_set
    __swig_getmethods__["replaceStr"] = _tv.TEditor_replaceStr_get
    if _newclass:
        replaceStr = _swig_property(_tv.TEditor_replaceStr_get, _tv.TEditor_replaceStr_set)
    __swig_setmethods__["clipboard"] = _tv.TEditor_clipboard_set
    __swig_getmethods__["clipboard"] = _tv.TEditor_clipboard_get
    if _newclass:
        clipboard = _swig_property(_tv.TEditor_clipboard_get, _tv.TEditor_clipboard_set)
    __swig_setmethods__["tabSize"] = _tv.TEditor_tabSize_set
    __swig_getmethods__["tabSize"] = _tv.TEditor_tabSize_get
    if _newclass:
        tabSize = _swig_property(_tv.TEditor_tabSize_get, _tv.TEditor_tabSize_set)
    __swig_setmethods__["lockCount"] = _tv.TEditor_lockCount_set
    __swig_getmethods__["lockCount"] = _tv.TEditor_lockCount_get
    if _newclass:
        lockCount = _swig_property(_tv.TEditor_lockCount_get, _tv.TEditor_lockCount_set)
    __swig_setmethods__["updateFlags"] = _tv.TEditor_updateFlags_set
    __swig_getmethods__["updateFlags"] = _tv.TEditor_updateFlags_get
    if _newclass:
        updateFlags = _swig_property(_tv.TEditor_updateFlags_get, _tv.TEditor_updateFlags_set)
    __swig_setmethods__["keyState"] = _tv.TEditor_keyState_set
    __swig_getmethods__["keyState"] = _tv.TEditor_keyState_get
    if _newclass:
        keyState = _swig_property(_tv.TEditor_keyState_get, _tv.TEditor_keyState_set)
TEditor_swigregister = _tv.TEditor_swigregister
TEditor_swigregister(TEditor)

class TMemoData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMemoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMemoData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _tv.TMemoData_length_set
    __swig_getmethods__["length"] = _tv.TMemoData_length_get
    if _newclass:
        length = _swig_property(_tv.TMemoData_length_get, _tv.TMemoData_length_set)
    __swig_setmethods__["buffer"] = _tv.TMemoData_buffer_set
    __swig_getmethods__["buffer"] = _tv.TMemoData_buffer_get
    if _newclass:
        buffer = _swig_property(_tv.TMemoData_buffer_get, _tv.TMemoData_buffer_set)

    def __init__(self):
        this = _tv.new_TMemoData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TMemoData
    __del__ = lambda self: None
TMemoData_swigregister = _tv.TMemoData_swigregister
TMemoData_swigregister(TMemoData)

class TMemo(TEditor):
    __swig_setmethods__ = {}
    for _s in [TEditor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMemo, name, value)
    __swig_getmethods__ = {}
    for _s in [TEditor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMemo, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6):
        this = _tv.new_TMemo(arg2, arg3, arg4, arg5, arg6)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getData(self, rec):
        return _tv.TMemo_getData(self, rec)

    def setData(self, rec):
        return _tv.TMemo_setData(self, rec)

    def dataSize(self):
        return _tv.TMemo_dataSize(self)

    def getPalette(self):
        return _tv.TMemo_getPalette(self)

    def handleEvent(self, arg2):
        return _tv.TMemo_handleEvent(self, arg2)
    __swig_destroy__ = _tv.delete_TMemo
    __del__ = lambda self: None
TMemo_swigregister = _tv.TMemo_swigregister
TMemo_swigregister(TMemo)

class TFileEditor(TEditor):
    __swig_setmethods__ = {}
    for _s in [TEditor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TFileEditor, name, value)
    __swig_getmethods__ = {}
    for _s in [TEditor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TFileEditor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileName"] = _tv.TFileEditor_fileName_set
    __swig_getmethods__["fileName"] = _tv.TFileEditor_fileName_get
    if _newclass:
        fileName = _swig_property(_tv.TFileEditor_fileName_get, _tv.TFileEditor_fileName_set)

    def __init__(self, arg2, arg3, arg4, arg5, arg6):
        this = _tv.new_TFileEditor(arg2, arg3, arg4, arg5, arg6)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doneBuffer(self):
        return _tv.TFileEditor_doneBuffer(self)

    def handleEvent(self, arg2):
        return _tv.TFileEditor_handleEvent(self, arg2)

    def initBuffer(self):
        return _tv.TFileEditor_initBuffer(self)

    def loadFile(self):
        return _tv.TFileEditor_loadFile(self)

    def save(self):
        return _tv.TFileEditor_save(self)

    def saveAs(self):
        return _tv.TFileEditor_saveAs(self)

    def saveFile(self):
        return _tv.TFileEditor_saveFile(self)

    def setBufSize(self, arg2):
        return _tv.TFileEditor_setBufSize(self, arg2)

    def shutDown(self):
        return _tv.TFileEditor_shutDown(self)

    def updateCommands(self):
        return _tv.TFileEditor_updateCommands(self)

    def valid(self, arg2):
        return _tv.TFileEditor_valid(self, arg2)
    __swig_destroy__ = _tv.delete_TFileEditor
    __del__ = lambda self: None
TFileEditor_swigregister = _tv.TFileEditor_swigregister
TFileEditor_swigregister(TFileEditor)

class TEditWindow(TWindow):
    __swig_setmethods__ = {}
    for _s in [TWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TEditWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [TWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TEditWindow, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        this = _tv.new_TEditWindow(arg2, arg3, arg4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def close(self):
        return _tv.TEditWindow_close(self)

    def getTitle(self, arg2):
        return _tv.TEditWindow_getTitle(self, arg2)

    def handleEvent(self, arg2):
        return _tv.TEditWindow_handleEvent(self, arg2)

    def sizeLimits(self, min, max):
        return _tv.TEditWindow_sizeLimits(self, min, max)
    __swig_setmethods__["editor"] = _tv.TEditWindow_editor_set
    __swig_getmethods__["editor"] = _tv.TEditWindow_editor_get
    if _newclass:
        editor = _swig_property(_tv.TEditWindow_editor_get, _tv.TEditWindow_editor_set)
    __swig_destroy__ = _tv.delete_TEditWindow
    __del__ = lambda self: None
TEditWindow_swigregister = _tv.TEditWindow_swigregister
TEditWindow_swigregister(TEditWindow)

class TFindDialogRec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TFindDialogRec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TFindDialogRec, name)
    __repr__ = _swig_repr

    def __init__(self, str, flgs):
        this = _tv.new_TFindDialogRec(str, flgs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["find"] = _tv.TFindDialogRec_find_set
    __swig_getmethods__["find"] = _tv.TFindDialogRec_find_get
    if _newclass:
        find = _swig_property(_tv.TFindDialogRec_find_get, _tv.TFindDialogRec_find_set)
    __swig_setmethods__["options"] = _tv.TFindDialogRec_options_set
    __swig_getmethods__["options"] = _tv.TFindDialogRec_options_get
    if _newclass:
        options = _swig_property(_tv.TFindDialogRec_options_get, _tv.TFindDialogRec_options_set)
    __swig_destroy__ = _tv.delete_TFindDialogRec
    __del__ = lambda self: None
TFindDialogRec_swigregister = _tv.TFindDialogRec_swigregister
TFindDialogRec_swigregister(TFindDialogRec)

class TReplaceDialogRec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TReplaceDialogRec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TReplaceDialogRec, name)
    __repr__ = _swig_repr

    def __init__(self, str, rep, flgs):
        this = _tv.new_TReplaceDialogRec(str, rep, flgs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["find"] = _tv.TReplaceDialogRec_find_set
    __swig_getmethods__["find"] = _tv.TReplaceDialogRec_find_get
    if _newclass:
        find = _swig_property(_tv.TReplaceDialogRec_find_get, _tv.TReplaceDialogRec_find_set)
    __swig_setmethods__["replace"] = _tv.TReplaceDialogRec_replace_set
    __swig_getmethods__["replace"] = _tv.TReplaceDialogRec_replace_get
    if _newclass:
        replace = _swig_property(_tv.TReplaceDialogRec_replace_get, _tv.TReplaceDialogRec_replace_set)
    __swig_setmethods__["options"] = _tv.TReplaceDialogRec_options_set
    __swig_getmethods__["options"] = _tv.TReplaceDialogRec_options_get
    if _newclass:
        options = _swig_property(_tv.TReplaceDialogRec_options_get, _tv.TReplaceDialogRec_options_set)
    __swig_destroy__ = _tv.delete_TReplaceDialogRec
    __del__ = lambda self: None
TReplaceDialogRec_swigregister = _tv.TReplaceDialogRec_swigregister
TReplaceDialogRec_swigregister(TReplaceDialogRec)

cmFileOpen = _tv.cmFileOpen
cmFileReplace = _tv.cmFileReplace
cmFileClear = _tv.cmFileClear
cmFileInit = _tv.cmFileInit
cmChangeDir = _tv.cmChangeDir
cmRevert = _tv.cmRevert
cmFileSelect = _tv.cmFileSelect
cmDirSelection = _tv.cmDirSelection
cmFileFocused = _tv.cmFileFocused
cmFileDoubleClicked = _tv.cmFileDoubleClicked
class TMethodHolder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMethodHolder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMethodHolder, name)
    __repr__ = _swig_repr

    def initStatusLine(self, arg0):
        return _tv.TMethodHolder_initStatusLine(self, arg0)

    def initMenuBar(self, arg0):
        return _tv.TMethodHolder_initMenuBar(self, arg0)

    def initDeskTop(self, arg0):
        return _tv.TMethodHolder_initDeskTop(self, arg0)
    __swig_destroy__ = _tv.delete_TMethodHolder
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == TMethodHolder:
            _self = None
        else:
            _self = self
        this = _tv.new_TMethodHolder(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _tv.disown_TMethodHolder(self)
        return weakref_proxy(self)
TMethodHolder_swigregister = _tv.TMethodHolder_swigregister
TMethodHolder_swigregister(TMethodHolder)

class TAppWrapper(TApplication):
    __swig_setmethods__ = {}
    for _s in [TApplication]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TAppWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [TApplication]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TAppWrapper, name)
    __repr__ = _swig_repr
    if _newclass:
        _sInitStatusLine = staticmethod(_tv.TAppWrapper__sInitStatusLine)
    else:
        _sInitStatusLine = _tv.TAppWrapper__sInitStatusLine
    if _newclass:
        _sInitMenuBar = staticmethod(_tv.TAppWrapper__sInitMenuBar)
    else:
        _sInitMenuBar = _tv.TAppWrapper__sInitMenuBar
    if _newclass:
        _sInitDeskTop = staticmethod(_tv.TAppWrapper__sInitDeskTop)
    else:
        _sInitDeskTop = _tv.TAppWrapper__sInitDeskTop
    __swig_setmethods__["methods"] = _tv.TAppWrapper_methods_set
    __swig_getmethods__["methods"] = _tv.TAppWrapper_methods_get
    if _newclass:
        methods = _swig_property(_tv.TAppWrapper_methods_get, _tv.TAppWrapper_methods_set)

    def __init__(self, arg2):
        if self.__class__ == TAppWrapper:
            _self = None
        else:
            _self = self
        this = _tv.new_TAppWrapper(_self, arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tv.delete_TAppWrapper
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _tv.disown_TAppWrapper(self)
        return weakref_proxy(self)
TAppWrapper_swigregister = _tv.TAppWrapper_swigregister
TAppWrapper_swigregister(TAppWrapper)

def TAppWrapper__sInitStatusLine(arg2):
    return _tv.TAppWrapper__sInitStatusLine(arg2)
TAppWrapper__sInitStatusLine = _tv.TAppWrapper__sInitStatusLine

def TAppWrapper__sInitMenuBar(arg2):
    return _tv.TAppWrapper__sInitMenuBar(arg2)
TAppWrapper__sInitMenuBar = _tv.TAppWrapper__sInitMenuBar

def TAppWrapper__sInitDeskTop(arg2):
    return _tv.TAppWrapper__sInitDeskTop(arg2)
TAppWrapper__sInitDeskTop = _tv.TAppWrapper__sInitDeskTop

# This file is compatible with both classic and new-style classes.


