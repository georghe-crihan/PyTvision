/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Boolean swig_types[0] 
#define  SWIGTYPE_p_TView swig_types[1] 
#define  SWIGTYPE_p_TRect swig_types[2] 
#define  SWIGTYPE_p_clock_t swig_types[3] 
#define  SWIGTYPE_p_TEvent swig_types[4] 
#define  SWIGTYPE_p_TApplication swig_types[5] 
#define  SWIGTYPE_p_ushort swig_types[6] 
#define  SWIGTYPE_p_TStatusLine swig_types[7] 
#define  SWIGTYPE_p_f_TRect__p_TStatusLine swig_types[8] 
#define  SWIGTYPE_p_TProgInit swig_types[9] 
#define  SWIGTYPE_p_f_TRect__p_TDeskTop swig_types[10] 
#define  SWIGTYPE_p_TDeskTop swig_types[11] 
#define  SWIGTYPE_p_TPalette swig_types[12] 
#define  SWIGTYPE_p_TProgram swig_types[13] 
#define  SWIGTYPE_p_TPoint swig_types[14] 
#define  SWIGTYPE_p_TVMainConfigFile swig_types[15] 
#define  SWIGTYPE_p_f_TRect__p_TMenuBar swig_types[16] 
#define  SWIGTYPE_p_TMenuBar swig_types[17] 
#define  SWIGTYPE_p_TAppWrapper swig_types[18] 
#define  SWIGTYPE_p_TMethodHolder swig_types[19] 
static swig_type_info *swig_types[21];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _inithelper.so
  ------------------------------------------------*/
#define SWIG_init    init_inithelper

#define SWIG_name    "_inithelper"

#include "inithelper.h"


#define Uses_TProgram
#define Uses_TVConfigFile
#include <tv.h>


#define Uses_TApplication
#include <tv.h>

/***********************************************************************
 * director.swg
 *
 *     This file contains support for director classes that proxy
 *     method calls from C++ to Python extensions.
 *
 * Author : Mark Rose (mrose@stm.lbl.gov)
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  /* base class for director exceptions */
  class DirectorException {
    protected:
      std::string swig_msg;
    public:
      DirectorException(const char* msg="") {
      }
      const char *getMessage() const { 
        return swig_msg.c_str(); 
      }
      virtual ~DirectorException() {}
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char* msg="") {
        swig_msg = "Swig director type mismatch: ";
        swig_msg += msg;
        PyErr_SetString(PyExc_TypeError, msg);
      }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {};

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif


  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped python object */
      PyObject* swig_self;
      /* flag indicating whether the object is owned by python or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* decrement the reference count of the wrapped python object */
      void swig_decref() const { 
        if (swig_disown_flag) {
          Py_DECREF(swig_self); 
        }
      }

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a python object, optionally taking ownership */
      Director(PyObject* self, bool disown) : swig_self(self), swig_disown_flag(disown) {
        swig_incref();
      }

      /* discard our reference at destruction */
      virtual ~Director() {
        swig_decref(); 
      }

      /* return a pointer to the wrapped python object */
      PyObject *swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped python object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return 0;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped python object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true; 
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped python object (the sense of "disown"
       * is from python) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag=true;
          swig_incref(); 
        } 
      }

      /* increase the reference count of the wrapped python object */
      void swig_incref() const { 
        if (swig_disown_flag) {
          Py_INCREF(swig_self); 
        }
      }

      /* methods to implement pseudo protected director members */
      virtual bool swig_get_inner(const char* name) const {
        return true;
      }

      virtual void swig_set_inner(const char* name, bool val) const {
      }
  };

  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "inithelper_wrap.h"

SwigDirector_TProgram::SwigDirector_TProgram(PyObject *self, bool disown): TProgram(), Swig::Director(self, disown) {
    
}



void SwigDirector_TProgram::outOfMemory() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::outOfMemory();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "outOfMemory", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::suspend() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::suspend();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "suspend", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::resume() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::resume();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "resume", NULL);
    Py_XDECREF(result);
}


TPalette &SwigDirector_TProgram::getPalette() const {
    TPalette *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return TProgram::getPalette();
    }
    result = PyObject_CallMethod(swig_get_self(), "getPalette", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_TPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return *c_result;
}


void SwigDirector_TProgram::idle() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::idle();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "idle", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::getEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::getEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "getEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::handleEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::handleEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "handleEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::initScreen() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::initScreen();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "initScreen", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::putEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::putEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "putEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::run() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::run();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "run", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TProgram::shutDown() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::shutDown();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "shutDown", NULL);
    Py_XDECREF(result);
}


SwigDirector_TApplication::SwigDirector_TApplication(PyObject *self, bool disown): TApplication(), Swig::Director(self, disown) {
    
}



void SwigDirector_TApplication::outOfMemory() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::outOfMemory();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "outOfMemory", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::suspend() {
    PyObject *result;
    
    if (swig_get_up()) {
        TApplication::suspend();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "suspend", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::resume() {
    PyObject *result;
    
    if (swig_get_up()) {
        TApplication::resume();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "resume", NULL);
    Py_XDECREF(result);
}


TPalette &SwigDirector_TApplication::getPalette() const {
    TPalette *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return TProgram::getPalette();
    }
    result = PyObject_CallMethod(swig_get_self(), "getPalette", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_TPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return *c_result;
}


void SwigDirector_TApplication::idle() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::idle();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "idle", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::getEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::getEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "getEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::handleEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::handleEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "handleEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::initScreen() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::initScreen();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "initScreen", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::putEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::putEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "putEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::run() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::run();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "run", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TApplication::shutDown() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::shutDown();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "shutDown", NULL);
    Py_XDECREF(result);
}


SwigDirector_TMethodHolder::SwigDirector_TMethodHolder(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



TStatusLine *SwigDirector_TMethodHolder::initStatusLine(TRect arg0) {
    TRect *argp1 ;
    TRect *argp10 ;
    PyObject * obj0 = 0 ;
    TStatusLine *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return TMethodHolder::initStatusLine(arg0);
    }
    {
        TRect *obCopy = new TRect();
        *obCopy = arg0;
        PyObject *o = SWIG_NewPointerObj((void*)obCopy, SWIGTYPE_p_TRect, 1);
        if(o == NULL) {
            Py_DECREF(o);
            throw Swig::DirectorTypeMismatchException("Cannot build a copy");
            //     PyErr_SetString(PyExc_RuntimeError, "Cannot build a copy");
            //     SWIG_fail;
        } else {
            obj0 = o;
        }
    }
    result = PyObject_CallMethod(swig_get_self(), "initStatusLine", "O" ,obj0);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_TStatusLine,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


TMenuBar *SwigDirector_TMethodHolder::initMenuBar(TRect arg0) {
    TRect *argp1 ;
    TRect *argp10 ;
    PyObject * obj0 = 0 ;
    TMenuBar *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return TMethodHolder::initMenuBar(arg0);
    }
    {
        TRect *obCopy = new TRect();
        *obCopy = arg0;
        PyObject *o = SWIG_NewPointerObj((void*)obCopy, SWIGTYPE_p_TRect, 1);
        if(o == NULL) {
            Py_DECREF(o);
            throw Swig::DirectorTypeMismatchException("Cannot build a copy");
            //     PyErr_SetString(PyExc_RuntimeError, "Cannot build a copy");
            //     SWIG_fail;
        } else {
            obj0 = o;
        }
    }
    result = PyObject_CallMethod(swig_get_self(), "initMenuBar", "O" ,obj0);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_TMenuBar,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


TDeskTop *SwigDirector_TMethodHolder::initDeskTop(TRect arg0) {
    TRect *argp1 ;
    TRect *argp10 ;
    PyObject * obj0 = 0 ;
    TDeskTop *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return TMethodHolder::initDeskTop(arg0);
    }
    {
        TRect *obCopy = new TRect();
        *obCopy = arg0;
        PyObject *o = SWIG_NewPointerObj((void*)obCopy, SWIGTYPE_p_TRect, 1);
        if(o == NULL) {
            Py_DECREF(o);
            throw Swig::DirectorTypeMismatchException("Cannot build a copy");
            //     PyErr_SetString(PyExc_RuntimeError, "Cannot build a copy");
            //     SWIG_fail;
        } else {
            obj0 = o;
        }
    }
    result = PyObject_CallMethod(swig_get_self(), "initDeskTop", "O" ,obj0);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_TDeskTop,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_TAppWrapper::SwigDirector_TAppWrapper(PyObject *self, TMethodHolder *arg0, bool disown): TAppWrapper(arg0), Swig::Director(self, disown) {
    
}



void SwigDirector_TAppWrapper::outOfMemory() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::outOfMemory();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "outOfMemory", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::suspend() {
    PyObject *result;
    
    if (swig_get_up()) {
        TApplication::suspend();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "suspend", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::resume() {
    PyObject *result;
    
    if (swig_get_up()) {
        TApplication::resume();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "resume", NULL);
    Py_XDECREF(result);
}


TPalette &SwigDirector_TAppWrapper::getPalette() const {
    TPalette *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return TProgram::getPalette();
    }
    result = PyObject_CallMethod(swig_get_self(), "getPalette", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_TPalette,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return *c_result;
}


void SwigDirector_TAppWrapper::idle() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::idle();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "idle", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::getEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::getEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "getEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::handleEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::handleEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "handleEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::initScreen() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::initScreen();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "initScreen", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::putEvent(TEvent &event) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::putEvent(event);
        return;
    }
    obj0 = SWIG_NewPointerObj(&event, SWIGTYPE_p_TEvent, 0);
    result = PyObject_CallMethod(swig_get_self(), "putEvent", "O" ,obj0);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::run() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::run();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "run", NULL);
    Py_XDECREF(result);
}


void SwigDirector_TAppWrapper::shutDown() {
    PyObject *result;
    
    if (swig_get_up()) {
        TProgram::shutDown();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "shutDown", NULL);
    Py_XDECREF(result);
}


#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_TProgInit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TStatusLine *(*arg1)(TRect) = (TStatusLine *(*)(TRect)) 0 ;
    TMenuBar *(*arg2)(TRect) = (TMenuBar *(*)(TRect)) 0 ;
    TDeskTop *(*arg3)(TRect) = (TDeskTop *(*)(TRect)) 0 ;
    TProgInit *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_TProgInit",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_f_TRect__p_TStatusLine,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_f_TRect__p_TMenuBar,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_f_TRect__p_TDeskTop,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (TProgInit *)new TProgInit(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TProgInit, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TProgInit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgInit *arg1 = (TProgInit *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TProgInit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgInit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_TProgInit_config_set(PyObject *_val) {
    {
        void *temp;
        if ((SWIG_ConvertPtr(_val,(void **) &temp, SWIGTYPE_p_TVMainConfigFile, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgInit::config (TVMainConfigFile *)'");
            return 1;
        }
        TProgInit::config = (TVMainConfigFile *) temp;
    }
    return 0;
}


static PyObject *_wrap_TProgInit_config_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) TProgInit::config, SWIGTYPE_p_TVMainConfigFile, 0);
    return pyobj;
}


static PyObject * TProgInit_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TProgInit, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_apColor_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable apColor is read-only.");
    return 1;
}


static PyObject *_wrap_apColor_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)apColor);
    return pyobj;
}


static int _wrap_apBlackWhite_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable apBlackWhite is read-only.");
    return 1;
}


static PyObject *_wrap_apBlackWhite_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)apBlackWhite);
    return pyobj;
}


static int _wrap_apMonochrome_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable apMonochrome is read-only.");
    return 1;
}


static PyObject *_wrap_apMonochrome_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)apMonochrome);
    return pyobj;
}


static PyObject *_wrap_new_TProgram(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    TProgram *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TProgram",&obj0)) goto fail;
    arg1 = obj0;
    if ( arg1 != Py_None ) {
        /* subclassed */
        result = (TProgram *)new SwigDirector_TProgram(arg1,false);
        
    } else {
        result = (TProgram *)new TProgram();
        
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TProgram, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TProgram(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TProgram",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_getEvent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    TEvent *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TProgram_getEvent",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->getEvent(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_getPalette(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    TPalette *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_getPalette",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        TPalette &_result_ref = ((TProgram const *)arg1)->getPalette();
        result = (TPalette *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TPalette, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_handleEvent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    TEvent *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TProgram_handleEvent",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->handleEvent(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_idle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_idle",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->idle();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_initScreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_initScreen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->initScreen();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_outOfMemory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_outOfMemory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->outOfMemory();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_putEvent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    TEvent *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TProgram_putEvent",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->putEvent(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_run(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_run",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->run();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_setScreenMode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    ushort arg2 ;
    char *arg3 = (char *) 0 ;
    ushort *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|s:TProgram_setScreenMode",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_ushort,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->setScreenMode(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_setScreenModeExt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|ii:TProgram_setScreenModeExt",&obj0,&obj1,&obj2,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setScreenMode(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_validView(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    TView *arg2 = (TView *) 0 ;
    TView *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TProgram_validView",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (TView *)(arg1)->validView(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TView, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_shutDown(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_shutDown",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->shutDown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_suspend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_suspend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->suspend();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_resume(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_resume",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->resume();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_syncScreenBuffer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_syncScreenBuffer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->syncScreenBuffer();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_initStatusLine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TRect arg1 ;
    TStatusLine *result;
    TRect *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_initStatusLine",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_TRect,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    result = (TStatusLine *)TProgram::initStatusLine(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TStatusLine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_initMenuBar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TRect arg1 ;
    TMenuBar *result;
    TRect *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_initMenuBar",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_TRect,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    result = (TMenuBar *)TProgram::initMenuBar(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TMenuBar, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TProgram_initDeskTop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TRect arg1 ;
    TDeskTop *result;
    TRect *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TProgram_initDeskTop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_TRect,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    result = (TDeskTop *)TProgram::initDeskTop(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TDeskTop, 0);
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_TProgram_application_set(PyObject *_val) {
    {
        void *temp;
        if ((SWIG_ConvertPtr(_val,(void **) &temp, SWIGTYPE_p_TProgram, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::application (TProgram *)'");
            return 1;
        }
        TProgram::application = (TProgram *) temp;
    }
    return 0;
}


static PyObject *_wrap_TProgram_application_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) TProgram::application, SWIGTYPE_p_TProgram, 0);
    return pyobj;
}


static int _wrap_TProgram_statusLine_set(PyObject *_val) {
    {
        void *temp;
        if ((SWIG_ConvertPtr(_val,(void **) &temp, SWIGTYPE_p_TStatusLine, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::statusLine (TStatusLine *)'");
            return 1;
        }
        TProgram::statusLine = (TStatusLine *) temp;
    }
    return 0;
}


static PyObject *_wrap_TProgram_statusLine_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) TProgram::statusLine, SWIGTYPE_p_TStatusLine, 0);
    return pyobj;
}


static int _wrap_TProgram_menuBar_set(PyObject *_val) {
    {
        void *temp;
        if ((SWIG_ConvertPtr(_val,(void **) &temp, SWIGTYPE_p_TMenuBar, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::menuBar (TMenuBar *)'");
            return 1;
        }
        TProgram::menuBar = (TMenuBar *) temp;
    }
    return 0;
}


static PyObject *_wrap_TProgram_menuBar_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) TProgram::menuBar, SWIGTYPE_p_TMenuBar, 0);
    return pyobj;
}


static int _wrap_TProgram_deskTop_set(PyObject *_val) {
    {
        void *temp;
        if ((SWIG_ConvertPtr(_val,(void **) &temp, SWIGTYPE_p_TDeskTop, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::deskTop (TDeskTop *)'");
            return 1;
        }
        TProgram::deskTop = (TDeskTop *) temp;
    }
    return 0;
}


static PyObject *_wrap_TProgram_deskTop_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) TProgram::deskTop, SWIGTYPE_p_TDeskTop, 0);
    return pyobj;
}


static int _wrap_TProgram_appPalette_set(PyObject *_val) {
    {
        long temp = PyInt_AsLong(_val);
        if (PyErr_Occurred()) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::appPalette (int)'");
            return 1;
        }
        TProgram::appPalette = (int) temp;
    }
    return 0;
}


static PyObject *_wrap_TProgram_appPalette_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)TProgram::appPalette);
    return pyobj;
}


static int _wrap_TProgram_lastIdleClock_set(PyObject *_val) {
    {
        clock_t * temp;
        if ((SWIG_ConvertPtr(_val, (void **) &temp, SWIGTYPE_p_clock_t, SWIG_POINTER_EXCEPTION)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::lastIdleClock (clock_t)'");
            return 1;
        }
        TProgram::lastIdleClock = *((clock_t *) temp);
    }
    return 0;
}


static PyObject *_wrap_TProgram_lastIdleClock_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &TProgram::lastIdleClock, SWIGTYPE_p_clock_t, 0);
    return pyobj;
}


static int _wrap_TProgram_inIdleTime_set(PyObject *_val) {
    {
        clock_t * temp;
        if ((SWIG_ConvertPtr(_val, (void **) &temp, SWIGTYPE_p_clock_t, SWIG_POINTER_EXCEPTION)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::inIdleTime (clock_t)'");
            return 1;
        }
        TProgram::inIdleTime = *((clock_t *) temp);
    }
    return 0;
}


static PyObject *_wrap_TProgram_inIdleTime_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &TProgram::inIdleTime, SWIGTYPE_p_clock_t, 0);
    return pyobj;
}


static int _wrap_TProgram_inIdle_set(PyObject *_val) {
    {
        Boolean * temp;
        if ((SWIG_ConvertPtr(_val, (void **) &temp, SWIGTYPE_p_Boolean, SWIG_POINTER_EXCEPTION)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::inIdle (Boolean)'");
            return 1;
        }
        TProgram::inIdle = *((Boolean *) temp);
    }
    return 0;
}


static PyObject *_wrap_TProgram_inIdle_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &TProgram::inIdle, SWIGTYPE_p_Boolean, 0);
    return pyobj;
}


static PyObject *_wrap_TProgram_resetIdleTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":TProgram_resetIdleTime")) goto fail;
    TProgram::resetIdleTime();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_TProgram_doNotReleaseCPU_set(PyObject *_val) {
    {
        char *temp = PyString_AsString(_val);
        if (PyErr_Occurred()) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TProgram::doNotReleaseCPU (char)'");
            return 1;
        }
        TProgram::doNotReleaseCPU = *temp;
    }
    return 0;
}


static PyObject *_wrap_TProgram_doNotReleaseCPU_get() {
    PyObject *pyobj;
    
    pyobj = Py_BuildValue((char*)"c",TProgram::doNotReleaseCPU);
    return pyobj;
}


static PyObject *_wrap_disown_TProgram(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TProgram *arg1 = (TProgram *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_TProgram",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TProgram,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TProgram_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TProgram, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TApplication(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    TApplication *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TApplication",&obj0)) goto fail;
    arg1 = obj0;
    if ( arg1 != Py_None ) {
        /* subclassed */
        result = (TApplication *)new SwigDirector_TApplication(arg1,false);
        
    } else {
        result = (TApplication *)new TApplication();
        
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TApplication, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TApplication(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TApplication *arg1 = (TApplication *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TApplication",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TApplication,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TApplication_suspend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TApplication *arg1 = (TApplication *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TApplication_suspend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TApplication,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->suspend();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TApplication_resume(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TApplication *arg1 = (TApplication *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TApplication_resume",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TApplication,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->resume();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_TApplication(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TApplication *arg1 = (TApplication *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_TApplication",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TApplication,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TApplication_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TApplication, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_TMethodHolder_initStatusLine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TMethodHolder *arg1 = (TMethodHolder *) 0 ;
    TRect arg2 ;
    TStatusLine *result;
    TRect *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TMethodHolder_initStatusLine",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TMethodHolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_TRect,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (TStatusLine *)(arg1)->initStatusLine(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TStatusLine, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TMethodHolder_initMenuBar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TMethodHolder *arg1 = (TMethodHolder *) 0 ;
    TRect arg2 ;
    TMenuBar *result;
    TRect *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TMethodHolder_initMenuBar",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TMethodHolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_TRect,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (TMenuBar *)(arg1)->initMenuBar(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TMenuBar, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TMethodHolder_initDeskTop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TMethodHolder *arg1 = (TMethodHolder *) 0 ;
    TRect arg2 ;
    TDeskTop *result;
    TRect *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TMethodHolder_initDeskTop",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TMethodHolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_TRect,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (TDeskTop *)(arg1)->initDeskTop(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TDeskTop, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TMethodHolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TMethodHolder *arg1 = (TMethodHolder *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TMethodHolder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TMethodHolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TMethodHolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    TMethodHolder *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TMethodHolder",&obj0)) goto fail;
    arg1 = obj0;
    if ( arg1 != Py_None ) {
        /* subclassed */
        result = (TMethodHolder *)new SwigDirector_TMethodHolder(arg1);
        
    } else {
        result = (TMethodHolder *)new TMethodHolder();
        
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TMethodHolder, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_TMethodHolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TMethodHolder *arg1 = (TMethodHolder *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_TMethodHolder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TMethodHolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TMethodHolder_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TMethodHolder, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_TAppWrapper_methods_set(PyObject *_val) {
    {
        void *temp;
        if ((SWIG_ConvertPtr(_val,(void **) &temp, SWIGTYPE_p_TMethodHolder, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'TAppWrapper::methods (TMethodHolder *)'");
            return 1;
        }
        TAppWrapper::methods = (TMethodHolder *) temp;
    }
    return 0;
}


static PyObject *_wrap_TAppWrapper_methods_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) TAppWrapper::methods, SWIGTYPE_p_TMethodHolder, 0);
    return pyobj;
}


static PyObject *_wrap_new_TAppWrapper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    TMethodHolder *arg2 = (TMethodHolder *) 0 ;
    TAppWrapper *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_TAppWrapper",&obj0,&obj1)) goto fail;
    arg1 = obj0;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TMethodHolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ( arg1 != Py_None ) {
        /* subclassed */
        result = (TAppWrapper *)new SwigDirector_TAppWrapper(arg1,arg2,false);
        
    } else {
        result = (TAppWrapper *)new TAppWrapper(arg2);
        
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TAppWrapper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TAppWrapper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TAppWrapper *arg1 = (TAppWrapper *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TAppWrapper",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TAppWrapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_TAppWrapper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TAppWrapper *arg1 = (TAppWrapper *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_TAppWrapper",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TAppWrapper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TAppWrapper_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TAppWrapper, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_TProgInit", _wrap_new_TProgInit, METH_VARARGS },
	 { (char *)"delete_TProgInit", _wrap_delete_TProgInit, METH_VARARGS },
	 { (char *)"TProgInit_swigregister", TProgInit_swigregister, METH_VARARGS },
	 { (char *)"new_TProgram", _wrap_new_TProgram, METH_VARARGS },
	 { (char *)"delete_TProgram", _wrap_delete_TProgram, METH_VARARGS },
	 { (char *)"TProgram_getEvent", _wrap_TProgram_getEvent, METH_VARARGS },
	 { (char *)"TProgram_getPalette", _wrap_TProgram_getPalette, METH_VARARGS },
	 { (char *)"TProgram_handleEvent", _wrap_TProgram_handleEvent, METH_VARARGS },
	 { (char *)"TProgram_idle", _wrap_TProgram_idle, METH_VARARGS },
	 { (char *)"TProgram_initScreen", _wrap_TProgram_initScreen, METH_VARARGS },
	 { (char *)"TProgram_outOfMemory", _wrap_TProgram_outOfMemory, METH_VARARGS },
	 { (char *)"TProgram_putEvent", _wrap_TProgram_putEvent, METH_VARARGS },
	 { (char *)"TProgram_run", _wrap_TProgram_run, METH_VARARGS },
	 { (char *)"TProgram_setScreenMode", _wrap_TProgram_setScreenMode, METH_VARARGS },
	 { (char *)"TProgram_setScreenModeExt", _wrap_TProgram_setScreenModeExt, METH_VARARGS },
	 { (char *)"TProgram_validView", _wrap_TProgram_validView, METH_VARARGS },
	 { (char *)"TProgram_shutDown", _wrap_TProgram_shutDown, METH_VARARGS },
	 { (char *)"TProgram_suspend", _wrap_TProgram_suspend, METH_VARARGS },
	 { (char *)"TProgram_resume", _wrap_TProgram_resume, METH_VARARGS },
	 { (char *)"TProgram_syncScreenBuffer", _wrap_TProgram_syncScreenBuffer, METH_VARARGS },
	 { (char *)"TProgram_initStatusLine", _wrap_TProgram_initStatusLine, METH_VARARGS },
	 { (char *)"TProgram_initMenuBar", _wrap_TProgram_initMenuBar, METH_VARARGS },
	 { (char *)"TProgram_initDeskTop", _wrap_TProgram_initDeskTop, METH_VARARGS },
	 { (char *)"TProgram_resetIdleTime", _wrap_TProgram_resetIdleTime, METH_VARARGS },
	 { (char *)"disown_TProgram", _wrap_disown_TProgram, METH_VARARGS },
	 { (char *)"TProgram_swigregister", TProgram_swigregister, METH_VARARGS },
	 { (char *)"new_TApplication", _wrap_new_TApplication, METH_VARARGS },
	 { (char *)"delete_TApplication", _wrap_delete_TApplication, METH_VARARGS },
	 { (char *)"TApplication_suspend", _wrap_TApplication_suspend, METH_VARARGS },
	 { (char *)"TApplication_resume", _wrap_TApplication_resume, METH_VARARGS },
	 { (char *)"disown_TApplication", _wrap_disown_TApplication, METH_VARARGS },
	 { (char *)"TApplication_swigregister", TApplication_swigregister, METH_VARARGS },
	 { (char *)"TMethodHolder_initStatusLine", _wrap_TMethodHolder_initStatusLine, METH_VARARGS },
	 { (char *)"TMethodHolder_initMenuBar", _wrap_TMethodHolder_initMenuBar, METH_VARARGS },
	 { (char *)"TMethodHolder_initDeskTop", _wrap_TMethodHolder_initDeskTop, METH_VARARGS },
	 { (char *)"delete_TMethodHolder", _wrap_delete_TMethodHolder, METH_VARARGS },
	 { (char *)"new_TMethodHolder", _wrap_new_TMethodHolder, METH_VARARGS },
	 { (char *)"disown_TMethodHolder", _wrap_disown_TMethodHolder, METH_VARARGS },
	 { (char *)"TMethodHolder_swigregister", TMethodHolder_swigregister, METH_VARARGS },
	 { (char *)"new_TAppWrapper", _wrap_new_TAppWrapper, METH_VARARGS },
	 { (char *)"delete_TAppWrapper", _wrap_delete_TAppWrapper, METH_VARARGS },
	 { (char *)"disown_TAppWrapper", _wrap_disown_TAppWrapper, METH_VARARGS },
	 { (char *)"TAppWrapper_swigregister", TAppWrapper_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_TAppWrapperTo_p_TApplication(void *x) {
    return (void *)((TApplication *)  ((TAppWrapper *) x));
}
static void *_p_TProgramTo_p_TProgInit(void *x) {
    return (void *)((TProgInit *)  ((TProgram *) x));
}
static void *_p_TApplicationTo_p_TProgInit(void *x) {
    return (void *)((TProgInit *) (TProgram *) ((TApplication *) x));
}
static void *_p_TAppWrapperTo_p_TProgInit(void *x) {
    return (void *)((TProgInit *) (TProgram *)(TApplication *) ((TAppWrapper *) x));
}
static void *_p_TApplicationTo_p_TProgram(void *x) {
    return (void *)((TProgram *)  ((TApplication *) x));
}
static void *_p_TAppWrapperTo_p_TProgram(void *x) {
    return (void *)((TProgram *) (TApplication *) ((TAppWrapper *) x));
}
static swig_type_info _swigt__p_Boolean[] = {{"_p_Boolean", 0, "Boolean *", 0},{"_p_Boolean"},{0}};
static swig_type_info _swigt__p_TView[] = {{"_p_TView", 0, "TView *", 0},{"_p_TView"},{0}};
static swig_type_info _swigt__p_TRect[] = {{"_p_TRect", 0, "TRect *", 0},{"_p_TRect"},{0}};
static swig_type_info _swigt__p_clock_t[] = {{"_p_clock_t", 0, "clock_t *", 0},{"_p_clock_t"},{0}};
static swig_type_info _swigt__p_TEvent[] = {{"_p_TEvent", 0, "TEvent *", 0},{"_p_TEvent"},{0}};
static swig_type_info _swigt__p_TApplication[] = {{"_p_TApplication", 0, "TApplication *", 0},{"_p_TApplication"},{"_p_TAppWrapper", _p_TAppWrapperTo_p_TApplication},{0}};
static swig_type_info _swigt__p_ushort[] = {{"_p_ushort", 0, "ushort *", 0},{"_p_ushort"},{0}};
static swig_type_info _swigt__p_TStatusLine[] = {{"_p_TStatusLine", 0, "TStatusLine *", 0},{"_p_TStatusLine"},{0}};
static swig_type_info _swigt__p_f_TRect__p_TStatusLine[] = {{"_p_f_TRect__p_TStatusLine", 0, "TStatusLine *(*)(TRect)", 0},{"_p_f_TRect__p_TStatusLine"},{0}};
static swig_type_info _swigt__p_TProgInit[] = {{"_p_TProgInit", 0, "TProgInit *", 0},{"_p_TProgram", _p_TProgramTo_p_TProgInit},{"_p_TApplication", _p_TApplicationTo_p_TProgInit},{"_p_TAppWrapper", _p_TAppWrapperTo_p_TProgInit},{"_p_TProgInit"},{0}};
static swig_type_info _swigt__p_f_TRect__p_TDeskTop[] = {{"_p_f_TRect__p_TDeskTop", 0, "TDeskTop *(*)(TRect)", 0},{"_p_f_TRect__p_TDeskTop"},{0}};
static swig_type_info _swigt__p_TDeskTop[] = {{"_p_TDeskTop", 0, "TDeskTop *", 0},{"_p_TDeskTop"},{0}};
static swig_type_info _swigt__p_TPalette[] = {{"_p_TPalette", 0, "TPalette *", 0},{"_p_TPalette"},{0}};
static swig_type_info _swigt__p_TProgram[] = {{"_p_TProgram", 0, "TProgram *", 0},{"_p_TProgram"},{"_p_TApplication", _p_TApplicationTo_p_TProgram},{"_p_TAppWrapper", _p_TAppWrapperTo_p_TProgram},{0}};
static swig_type_info _swigt__p_TPoint[] = {{"_p_TPoint", 0, "TPoint *", 0},{"_p_TPoint"},{0}};
static swig_type_info _swigt__p_TVMainConfigFile[] = {{"_p_TVMainConfigFile", 0, "TVMainConfigFile *", 0},{"_p_TVMainConfigFile"},{0}};
static swig_type_info _swigt__p_f_TRect__p_TMenuBar[] = {{"_p_f_TRect__p_TMenuBar", 0, "TMenuBar *(*)(TRect)", 0},{"_p_f_TRect__p_TMenuBar"},{0}};
static swig_type_info _swigt__p_TMenuBar[] = {{"_p_TMenuBar", 0, "TMenuBar *", 0},{"_p_TMenuBar"},{0}};
static swig_type_info _swigt__p_TAppWrapper[] = {{"_p_TAppWrapper", 0, "TAppWrapper *", 0},{"_p_TAppWrapper"},{0}};
static swig_type_info _swigt__p_TMethodHolder[] = {{"_p_TMethodHolder", 0, "TMethodHolder *", 0},{"_p_TMethodHolder"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Boolean, 
_swigt__p_TView, 
_swigt__p_TRect, 
_swigt__p_clock_t, 
_swigt__p_TEvent, 
_swigt__p_TApplication, 
_swigt__p_ushort, 
_swigt__p_TStatusLine, 
_swigt__p_f_TRect__p_TStatusLine, 
_swigt__p_TProgInit, 
_swigt__p_f_TRect__p_TDeskTop, 
_swigt__p_TDeskTop, 
_swigt__p_TPalette, 
_swigt__p_TProgram, 
_swigt__p_TPoint, 
_swigt__p_TVMainConfigFile, 
_swigt__p_f_TRect__p_TMenuBar, 
_swigt__p_TMenuBar, 
_swigt__p_TAppWrapper, 
_swigt__p_TMethodHolder, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_STRING,  (char*)"cpColor", 0, 0, (void *)"qpxt ($\27\37\3211\36q7?:\23\23>!p\177z\23\23pp\177~ +/x.p0?>\37/\32 r110/>1\238", 0},
{ SWIG_PY_STRING,  (char*)"cpBlackWhite", 0, 0, (void *)"ppx\177\7\7\17\7\17\7pp\7p\7\17\7pp\7pp\177\177p\7pp\177\177\7\17\17x\17x\7\17\17\17p\17\7ppp\7p\17\7\7\7", 0},
{ SWIG_PY_STRING,  (char*)"cpMonochrome", 0, 0, (void *)"p\7\7\17ppp\7\17\7pp\7p\7\17\7pp\7pppp\7\7ppp\17\7\7\17p\17p\7\17\17\7p\7\7p\7\7\7p\17\7\7\7", 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgInit_config",_wrap_TProgInit_config_get, _wrap_TProgInit_config_set);
    SWIG_addvarlink(SWIG_globals,(char*)"apColor",_wrap_apColor_get, _wrap_apColor_set);
    SWIG_addvarlink(SWIG_globals,(char*)"apBlackWhite",_wrap_apBlackWhite_get, _wrap_apBlackWhite_set);
    SWIG_addvarlink(SWIG_globals,(char*)"apMonochrome",_wrap_apMonochrome_get, _wrap_apMonochrome_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_application",_wrap_TProgram_application_get, _wrap_TProgram_application_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_statusLine",_wrap_TProgram_statusLine_get, _wrap_TProgram_statusLine_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_menuBar",_wrap_TProgram_menuBar_get, _wrap_TProgram_menuBar_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_deskTop",_wrap_TProgram_deskTop_get, _wrap_TProgram_deskTop_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_appPalette",_wrap_TProgram_appPalette_get, _wrap_TProgram_appPalette_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_lastIdleClock",_wrap_TProgram_lastIdleClock_get, _wrap_TProgram_lastIdleClock_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_inIdleTime",_wrap_TProgram_inIdleTime_get, _wrap_TProgram_inIdleTime_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_inIdle",_wrap_TProgram_inIdle_get, _wrap_TProgram_inIdle_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TProgram_doNotReleaseCPU",_wrap_TProgram_doNotReleaseCPU_get, _wrap_TProgram_doNotReleaseCPU_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TAppWrapper_methods",_wrap_TAppWrapper_methods_get, _wrap_TAppWrapper_methods_set);
}

