<Eterm-0.9.2>
#
# This the sample Eterm config file adapted to be used with TV applications.
# The resulting terminal is fine tunned to run a TV application and not for
# general use.
# What's changed?
#
# * Font sizes, most have 0.5 aspect ratio.
# * Colors to match VGA BIOS values.
# * Removed scroll bar, actually the only way I know to scroll in this setup
#   is using the mouse wheel. Don't know how to assign it to a key if you
#   know please tellme.
# * A lot of key combinations defined.
# * The menu is reduced to just a few items.
#
# I didn't remove all original comments so you can customize it.
#
# IMPORTANT!! The keys assignments are good for TV and what my system defines
# as TERM=Eterm, it doesn't mean it will work on any system.
# I tested it Using Debian GNU/Linux Woody.
#
# As always, the authors guarantee absolutely nothing and take
# no responsibility for anything that might happen to you, your
# computer, your dog, your sex life, or anyone or anything else
# directly or indirectly through the use of, or inability to use,
# this program.  Use at your OWN risk.

# Define the color properties
begin color

# Foreground, background, cursor, scrollbar, pointer colors
    foreground #aaaaaa
    background black
    cursor #ffff00
    cursor_text #880000
    pointer white

# video attribute can either be "normal" or "reverse"
    video normal

# Redefine the 16 basic colors, if you really feel the need
# First word is "color", next is the number (0-15, BD, or UL),
# then the values for red, green, and blue separated by spaces
# Numbers are base 10 unless preceded by "0x" (base 16) or '0'
# (base 8).  Alternatively, you can use color names or #xxxxxx
# format.

# SET: The default Eterm palette doesn't match the VGA BIOS one, I think
# Eterm is wrong.
#
    color  0 0    0    0
    color  1 0xa8 0    0
    color  2 0    0xa8 0
    color  3 0xa8 0x54 0
    color  4 0    0    0xa8
    color  5 0xa8 0    0xa8
    color  6 0    0xa8 0xa8
    color  7 0xa8 0xa8 0xa8
    color  8 0x54 0x54 0x54
    color  9 0xfc 0x54 0x54
    color 10 0x54 0xfc 0x54
    color 11 0xfc 0xfc 0x54
    color 12 0x54 0x54 0xfc
    color 13 0xfc 0x54 0xfc
    color 14 0x54 0xfc 0xfc
    color 15 #ffffff
    color bd #ffffff
    color ul #ffffff

end color

# The X11 attributes section.  Should be fairly self-explanatory,
# but if not, consult the X man page.
begin attributes

# Geometry == widthxheight+x_offset+y_offset, offsets from top left
#             if +, bottom right if -
#    geometry 132x50+100+100
#    title %appname()
#    name %appname()
#    iconname Eterm

# Set the fonts.  These must be monospace fonts.  The values shown are
# the Eterm defaults.  The "bold" font is the font used if color BD has
# not been set and Eterm cannot map the foreground color to one of the
# high-intensity colors (8-15).
    font default 4
    font 0 5x7
    font 1 6x12
    font 2 7x14
    font 3 8x16
#   font 4 9x18 Fails on my system
    font 4 10x20
    font 5 12x24
#    font bold 7x14
end attributes

# The Multichar support options.  Same goes for these fonts as for the normal
# ones.  The "encoding" attribute can be either "eucj" or "sjis" or "euckr"
# or big5 or gb
begin multichar
    font 0 -misc-fixed-medium-r-normal--7-70-75-75-c-50-iso10646-1
    font 1 -misc-fixed-medium-r-normal--10-100-75-75-c-60-iso10646-1
    font 2 -misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso10646-1
    font 3 -misc-fixed-medium-r-normal--14-130-75-75-c-70-iso10646-1
    font 4 -misc-fixed-medium-r-normal--15-140-75-75-c-90-iso10646-1
    encoding iso-10646
end multichar

# Define the imageclasses.
begin imageclasses

# You must define this before setting any images that use it.  This is the $PATH-style variable
# that determines where Eterm looks for image files.
    path "./pix/:~/.Eterm/:~/.Eterm/themes/Eterm/pix:~/.Eterm/pix/:/usr/share/Eterm/pix/"

# If you want a different icon than the standard Eterm one, set this.
#   icon Eterm.xpm

# This is the background animator.  See the man page for the syntax.
#   anim 3 foo1 foo2 foo3

# The rest of the images.
    begin image
      type trough
      mode image allow image trans viewport auto
      state normal
      color black #666666
      file bar_vertical_3.png
# Here is how you specify the geometry string separately.  See the man page for its syntax.
      geom 100
      border 2 2 2 3
    end image
    begin image
      type anchor
      mode image allow image auto
      state normal
      color black #666666
      file bar_vertical_1.png
      geom 100
      border 2 2 2 3
      state selected
      file bar_vertical_2.png
      geom 100
      border 2 2 2 3
    end image
    begin image
      type thumb
      mode image allow image auto
      state normal
      color black #666666
      file thumb_1.png
      geom 100
      border 3 3 3 3
      state selected
      file thumb_2.png
      geom 100
      border 3 3 3 3
    end image
    begin image
      type up_arrow
      mode image allow image auto
      state normal
      color black #666666
      file button_arrow_up_1.png
      geom 100
      border 2 2 2 2
      state selected
      file button_arrow_up_2.png
      geom 100
      border 2 2 2 2
      state clicked
      file button_arrow_up_3.png
      geom 100
      border 2 2 2 2
    end image
    begin image
      type down_arrow
      mode image allow image auto
      state normal
      color black #666666
      file button_arrow_down_1.png
      geom 100
      border 2 2 2 2
      state selected
      file button_arrow_down_2.png
      geom 100
      border 2 2 2 2
      state clicked
      file button_arrow_down_3.png
      geom 100
      border 2 2 2 2
    end image
    begin image
      type menu
      #mode auto allow image auto
      mode image allow image auto
      state normal
      #color #AAAAAA #999999
      color black #999999
      file bar_horizontal_1.png
      geom 100
      border 2 3 2 3
      state selected
      file bar_horizontal_2.png
      geom 100
      border 2 3 2 3
    end image
    begin image
      type submenu
      #mode auto allow image auto
      mode image allow image auto
      state normal
      #color #AAAAAA #999999
      color black #999999
      file menu1.png
      geom 100
      border 3 15 3 3
      padding 3 15 3 3
      state selected
      file menu2.png
      geom 100
      border 3 15 3 3
      padding 3 15 3 3
      state clicked
      file menu3.png
      geom 100
      border 3 15 3 3
      padding 3 15 3 3
    end image
    begin image
      type button_bar
      #mode auto allow image auto
      mode image allow image auto
      state normal
      #color #AAAAAA #999999
      color black #999999
      file bar_horizontal_1.png
      geom 100
      border 2 3 2 2
      state disabled
      color white #333333
      cmod image 0xc0
      border 2 3 2 2
    end image
    begin image
      type button
      #mode auto allow image auto
      mode image allow image auto
      state normal
      #color #AAAAAA #999999
      color black #cccccc
      file bar_horizontal_1.png
      geom 100
      border 2 3 2 2
      state selected
      file bar_horizontal_2.png
      geom 100
      border 2 3 2 2
      state clicked
      file bar_horizontal_3.png
      geom 100
      border 2 3 2 2
    end image
end

%include "menus.cfg"

# This section *must* come after the menu definitions if you want
# menu actions to work.  C'est la vie. :-)
#
# Syntax:  bind [ { <modifiers> | anymod } ] { <key> | <keysym> | <button> } to { string | echo | menu } <parameter>
#
begin actions
    bind ctrl button1 to string "\e]5;\a"
    bind ctrl button2 to string "\e[?30t"
    bind ctrl button3 to menu Eterm
    bind ctrl shift button3 to string "\e]6;14\a"
    # SET: XTerm style keys, they are more descriptive than native Eterm keys:
    # Insert
    bind                0xff63 to echo "\e[2~"
    bind shift          0xff63 to echo "\e[2;2~"
    bind alt            0xff63 to echo "\e[2;3~"
    bind shift alt      0xff63 to echo "\e[2;4~"
    bind ctrl           0xff63 to echo "\e[2;5~"
    bind shift ctrl     0xff63 to echo "\e[2;6~"
    bind alt ctrl       0xff63 to echo "\e[2;7~"
    bind shift alt ctrl 0xff63 to echo "\e[2;8~"
    # Delete
    #bind                0xffff to echo "\e[3~"
    bind shift          0xffff to echo "\e[3;2~"
    bind alt            0xffff to echo "\e[3;3~"
    bind shift alt      0xffff to echo "\e[3;4~"
    bind ctrl           0xffff to echo "\e[3;5~"
    bind shift ctrl     0xffff to echo "\e[3;6~"
    bind alt ctrl       0xffff to echo "\e[3;7~"
    bind shift alt ctrl 0xffff to echo "\e[3;8~"
    # Page Up
    bind                0xff55 to echo "\e[5~"
    bind shift          0xff55 to echo "\e[5;2~"
    bind alt            0xff55 to echo "\e[5;3~"
    bind shift alt      0xff55 to echo "\e[5;4~"
    bind ctrl           0xff55 to echo "\e[5;5~"
    bind shift ctrl     0xff55 to echo "\e[5;6~"
    bind alt ctrl       0xff55 to echo "\e[5;7~"
    bind shift alt ctrl 0xff55 to echo "\e[5;8~"
    # Page Down
    bind                0xff56 to echo "\e[6~"
    bind shift          0xff56 to echo "\e[6;2~"
    bind alt            0xff56 to echo "\e[6;3~"
    bind shift alt      0xff56 to echo "\e[6;4~"
    bind ctrl           0xff56 to echo "\e[6;5~"
    bind shift ctrl     0xff56 to echo "\e[6;6~"
    bind alt ctrl       0xff56 to echo "\e[6;7~"
    bind shift alt ctrl 0xff56 to echo "\e[6;8~"
    # F5
    bind                0xffc2 to echo "\e[15~"
    bind shift          0xffc2 to echo "\e[15;2~"
    bind alt            0xffc2 to echo "\e[15;3~"
    bind shift alt      0xffc2 to echo "\e[15;4~"
    bind ctrl           0xffc2 to echo "\e[15;5~"
    bind shift ctrl     0xffc2 to echo "\e[15;6~"
    bind alt ctrl       0xffc2 to echo "\e[15;7~"
    bind shift alt ctrl 0xffc2 to echo "\e[15;8~"
    # F6
    bind                0xffc3 to echo "\e[16~"
    bind shift          0xffc3 to echo "\e[16;2~"
    bind alt            0xffc3 to echo "\e[16;3~"
    bind shift alt      0xffc3 to echo "\e[16;4~"
    bind ctrl           0xffc3 to echo "\e[16;5~"
    bind shift ctrl     0xffc3 to echo "\e[16;6~"
    bind alt ctrl       0xffc3 to echo "\e[16;7~"
    bind shift alt ctrl 0xffc3 to echo "\e[16;8~"
    # F7
    bind                0xffc4 to echo "\e[18~"
    bind shift          0xffc4 to echo "\e[18;2~"
    bind alt            0xffc4 to echo "\e[18;3~"
    bind shift alt      0xffc4 to echo "\e[18;4~"
    bind ctrl           0xffc4 to echo "\e[18;5~"
    bind shift ctrl     0xffc4 to echo "\e[18;6~"
    bind alt ctrl       0xffc4 to echo "\e[18;7~"
    bind shift alt ctrl 0xffc4 to echo "\e[18;8~"
    # F8
    bind                0xffc5 to echo "\e[19~"
    bind shift          0xffc5 to echo "\e[19;2~"
    bind alt            0xffc5 to echo "\e[19;3~"
    bind shift alt      0xffc5 to echo "\e[19;4~"
    bind ctrl           0xffc5 to echo "\e[19;5~"
    bind shift ctrl     0xffc5 to echo "\e[19;6~"
    bind alt ctrl       0xffc5 to echo "\e[19;7~"
    bind shift alt ctrl 0xffc5 to echo "\e[19;8~"
    # F9
    bind                0xffc6 to echo "\e[20~"
    bind shift          0xffc6 to echo "\e[20;2~"
    bind alt            0xffc6 to echo "\e[20;3~"
    bind shift alt      0xffc6 to echo "\e[20;4~"
    bind ctrl           0xffc6 to echo "\e[20;5~"
    bind shift ctrl     0xffc6 to echo "\e[20;6~"
    bind alt ctrl       0xffc6 to echo "\e[20;7~"
    bind shift alt ctrl 0xffc6 to echo "\e[20;8~"
    # F10
    bind                0xffc7 to echo "\e[21~"
    bind shift          0xffc7 to echo "\e[21;2~"
    bind alt            0xffc7 to echo "\e[21;3~"
    bind shift alt      0xffc7 to echo "\e[21;4~"
    bind ctrl           0xffc7 to echo "\e[21;5~"
    bind shift ctrl     0xffc7 to echo "\e[21;6~"
    bind alt ctrl       0xffc7 to echo "\e[21;7~"
    bind shift alt ctrl 0xffc7 to echo "\e[21;8~"
    # F11
    bind                0xffc8 to echo "\e[23~"
    bind shift          0xffc8 to echo "\e[23;2~"
    bind alt            0xffc8 to echo "\e[23;3~"
    bind shift alt      0xffc8 to echo "\e[23;4~"
    bind ctrl           0xffc8 to echo "\e[23;5~"
    bind shift ctrl     0xffc8 to echo "\e[23;6~"
    bind alt ctrl       0xffc8 to echo "\e[23;7~"
    bind shift alt ctrl 0xffc8 to echo "\e[23;8~"
    # F12
    bind                0xffc9 to echo "\e[24~"
    bind shift          0xffc9 to echo "\e[24;2~"
    bind alt            0xffc9 to echo "\e[24;3~"
    bind shift alt      0xffc9 to echo "\e[24;4~"
    bind ctrl           0xffc9 to echo "\e[24;5~"
    bind shift ctrl     0xffc9 to echo "\e[24;6~"
    bind alt ctrl       0xffc9 to echo "\e[24;7~"
    bind shift alt ctrl 0xffc9 to echo "\e[24;8~"
    # Up
    bind                0xff52 to echo "\e[A"
    bind shift          0xff52 to echo "\e[2A"
    bind alt            0xff52 to echo "\e[3A"
    bind shift alt      0xff52 to echo "\e[4A"
    bind ctrl           0xff52 to echo "\e[5A"
    bind shift ctrl     0xff52 to echo "\e[6A"
    bind alt ctrl       0xff52 to echo "\e[7A"
    bind shift alt ctrl 0xff52 to echo "\e[8A"
    # Down
    bind                0xff54 to echo "\e[B"
    bind shift          0xff54 to echo "\e[2B"
    bind alt            0xff54 to echo "\e[3B"
    bind shift alt      0xff54 to echo "\e[4B"
    bind ctrl           0xff54 to echo "\e[5B"
    bind shift ctrl     0xff54 to echo "\e[6B"
    bind alt ctrl       0xff54 to echo "\e[7B"
    bind shift alt ctrl 0xff54 to echo "\e[8B"
    # Right
    bind                0xff53 to echo "\e[C"
    bind shift          0xff53 to echo "\e[2C"
    bind alt            0xff53 to echo "\e[3C"
    bind shift alt      0xff53 to echo "\e[4C"
    bind ctrl           0xff53 to echo "\e[5C"
    bind shift ctrl     0xff53 to echo "\e[6C"
    bind alt ctrl       0xff53 to echo "\e[7C"
    bind shift alt ctrl 0xff53 to echo "\e[8C"
    # Left
    bind                0xff51 to echo "\e[D"
    bind shift          0xff51 to echo "\e[2D"
    bind alt            0xff51 to echo "\e[3D"
    bind shift alt      0xff51 to echo "\e[4D"
    bind ctrl           0xff51 to echo "\e[5D"
    bind shift ctrl     0xff51 to echo "\e[6D"
    bind alt ctrl       0xff51 to echo "\e[7D"
    bind shift alt ctrl 0xff51 to echo "\e[8D"
    # End
    #bind                0xff57 to echo "\e[F"
    bind                0xffc1 to echo "\e[8~"
    bind shift          0xff57 to echo "\e[2F"
    bind alt            0xff57 to echo "\e[3F"
    bind shift alt      0xff57 to echo "\e[4F"
    bind ctrl           0xff57 to echo "\e[5F"
    bind shift ctrl     0xff57 to echo "\e[6F"
    bind alt ctrl       0xff57 to echo "\e[7F"
    bind shift alt ctrl 0xff57 to echo "\e[8F"
    # Home
    bind                0xff58 to echo "\e[H"
    bind shift          0xff58 to echo "\e[2H"
    bind alt            0xff58 to echo "\e[3H"
    bind shift alt      0xff58 to echo "\e[4H"
    bind ctrl           0xff58 to echo "\e[5H"
    bind shift ctrl     0xff58 to echo "\e[6H"
    bind alt ctrl       0xff58 to echo "\e[7H"
    bind shift alt ctrl 0xff58 to echo "\e[8H"
    # BackSpace
    bind shift          0xff08 to echo "\e[2K"
    bind alt            0xff08 to echo "\e[3K"
    bind shift alt      0xff08 to echo "\e[4K"
    bind ctrl           0xff08 to echo "\e[5K"
    bind shift ctrl     0xff08 to echo "\e[6K"
    bind alt ctrl       0xff08 to echo "\e[7K"
    bind shift alt ctrl 0xff08 to echo "\e[8K"
    # Tab
    bind shift          0xff09 to echo "\e[2T"
    bind alt            0xff09 to echo "\e[3T"
    bind shift alt      0xff09 to echo "\e[4T"
    bind ctrl           0xff09 to echo "\e[5T"
    bind shift ctrl     0xff09 to echo "\e[6T"
    bind alt ctrl       0xff09 to echo "\e[7T"
    bind shift alt ctrl 0xff09 to echo "\e[8T"
    # F1
    #bind                0xffbe to echo "\eOP"
    bind                0xffc1 to echo "\e[11~"
    bind shift          0xffbe to echo "\eO2P"
    bind alt            0xffbe to echo "\eO3P"
    bind shift alt      0xffbe to echo "\eO4P"
    bind ctrl           0xffbe to echo "\eO5P"
    bind shift ctrl     0xffbe to echo "\eO6P"
    bind alt ctrl       0xffbe to echo "\eO7P"
    bind shift alt ctrl 0xffbe to echo "\eO8P"
    # F2
    #bind                0xffbf to echo "\eOQ"
    bind                0xffc1 to echo "\e[12~"
    bind shift          0xffbf to echo "\eO2Q"
    bind alt            0xffbf to echo "\eO3Q"
    bind shift alt      0xffbf to echo "\eO4Q"
    bind ctrl           0xffbf to echo "\eO5Q"
    bind shift ctrl     0xffbf to echo "\eO6Q"
    bind alt ctrl       0xffbf to echo "\eO7Q"
    bind shift alt ctrl 0xffbf to echo "\eO8Q"
    # F3
    #bind                0xffc0 to echo "\eOR"
    bind                0xffc1 to echo "\e[13~"
    bind shift          0xffc0 to echo "\eO2R"
    bind alt            0xffc0 to echo "\eO3R"
    bind shift alt      0xffc0 to echo "\eO4R"
    bind ctrl           0xffc0 to echo "\eO5R"
    bind shift ctrl     0xffc0 to echo "\eO6R"
    bind alt ctrl       0xffc0 to echo "\eO7R"
    bind shift alt ctrl 0xffc0 to echo "\eO8R"
    # F4
    #bind                0xffc1 to echo "\eOS"
    bind                0xffc1 to echo "\e[14~"
    bind shift          0xffc1 to echo "\eO2S"
    bind alt            0xffc1 to echo "\eO3S"
    bind shift alt      0xffc1 to echo "\eO4S"
    bind ctrl           0xffc1 to echo "\eO5S"
    bind shift ctrl     0xffc1 to echo "\eO6S"
    bind alt ctrl       0xffc1 to echo "\eO7S"
    bind shift alt ctrl 0xffc1 to echo "\eO8S"
end actions

# This section must also come after the menus if you want any buttons
# to launch menus.  (If not, it can go anywhere.)
begin button_bar

# Specify a font.  The default buttonbar font is the default terminal
# font as defined in the attributes section above.
    font "-adobe-helvetica-medium-r-normal--10-100-75-75-p-56-iso8859-1"

# Add a button.  The syntax is:
#   button <text> [ icon <filename> ] action { string | echo | menu } <parameter>
#
    button Eterm action menu "Eterm Operations"
    button Font action menu Font
    rbutton icon help.png action script "spawn(Eterm -e man Eterm)"
    rbutton icon exit.png action script "exit"
end button_bar

# The XIM support options.
# input_method: set the name of your favorate input method program
# preedit_type: OverTheSpot or OffTheSpot or Root
#  begin xim
#    input_method Ami
#    preedit_type OverTheSpot
#  end xim

# Boolean variables.  The values can be "1", "on", or "true" for TRUE, or "0",
# "off", or "false" for FALSE.
begin toggles

# If true, Eterm will un-iconify itself when it receives a beep (ASCII 0x07)
    map_alert on

# If true, Eterm will flash rather than sending a beep.
    visual_bell off

# If true, Eterm will prepend '-' to the shell name when calling it.
    login_shell true

# If true, Eterm will display the scroll bar
    scrollbar off

# If true, Eterm will attempt to make an entry in the utmp file to record the
# login information.  Eterm *must* run privileged to do this.
    utmp_logging on


# If true, Eterm will select the whole line when you triple click on the
# window, instead of from that location/word to the end of the line.
    select_line false

# If true, Eterm will handle the Meta (Alt) + keypress to set the 8th bit.
# If false, Eterm will handle the Meta + keypress as an escape prefix. (default)
#    meta8 false

# If true, Eterm will start iconified.
    iconic false

# If true, Eterm will jump to the bottom of the window when something is output
# to the terminal.
    home_on_output 1

# If true, Eterm will jump to the bottom of the window when a key is pressed.
    home_on_input 1

# If true, Eterm will put the scrollbar on the right of the window (default is left).
    scrollbar_right true

# If true, the scrollbar will have no trough.
    scrollbar_floating false

# If true, Eterm will run with no window borders.
    borderless false

# If true, Eterm will use a double-buffered background pixmap for drawing text.  This
# makes redraws faster by reducing exposes, but it uses more memory.  If you have the
# memory to spare, it's a good idea.
#    double_buffer true

end toggles

begin keyboard

# Use the supplied keysym to reduce/enlarge the font
    smallfont_key LessThan
    bigfont_key GreaterThan
    meta_mod 1

# You can also associate a given keysym (0xff00 - 0xffff) with a string
#    keysym 0xffff "\r\n\e\007\t"

# Greek keyboard mode.  First the word "greek", then its boolean
# state, then its mode (either "iso" or "ibm").
#    greek off iso
end keyboard

begin misc

# The command to which to pipe print requests (printscreen)
#    print_pipe "lpr"

# The number of lines in the scrollback buffer.  More lines, more memory needed.
    save_lines 1024

# The characters to use as word delimiters for double-click selection
    cut_chars "\t\\\`\\\"\'&() *,;<=>?@[]{|}"

# Defines the width of the border between the terminal window and the client window.
# (Default is 5).
    border_width 5

# Defines the number of pixels to add between lines (default is 0).
#    line_space 2

# Value to use for $TERM
    term_name Eterm

# Program to exec (intended for use with themes)
#    exec foo

end misc
